<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="moore06.cs.purdue.edu" name="miniscala.test.CMScalaToCPS_Blackbox" tests="59" errors="0" failures="59" skipped="0" time="1.002" timestamp="2020-02-12T17:19:39">
                     <properties>
      <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/><property name="java.specification.version" value="11"/><property name="sun.cpu.isalist" value=""/><property name="sun.jnu.encoding" value="UTF-8"/><property name="sun.arch.data.model" value="64"/><property name="java.vendor.url" value="Unknown"/><property name="sun.boot.library.path" value="/usr/lib/jvm/java-11-openjdk-amd64/lib"/><property name="sun.java.command" value="/usr/share/sbt/bin/sbt-launch.jar test"/><property name="jdk.debug" value="release"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="java.version.date" value="2019-10-15"/><property name="java.home" value="/usr/lib/jvm/java-11-openjdk-amd64"/><property name="file.separator" value="/"/><property name="java.vm.compressedOopsMode" value="32-bit"/><property name="line.separator" value="
"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="java.runtime.version" value="11.0.5+10-post-Ubuntu-0ubuntu1.118.04"/><property name="user.name" value="won20"/><property name="file.encoding" value="UTF-8"/><property name="jnidispatch.path" value="/tmp/jna-113313108/jna7526630742114311036.tmp"/><property name="jna.loaded" value="true"/><property name="java.io.tmpdir" value="/tmp"/><property name="java.version" value="11.0.5"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/><property name="sun.os.patch.level" value="unknown"/><property name="java.library.path" value="/p/oracle12c::/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/><property name="java.vendor" value="Private Build"/><property name="scala.ext.dirs" value="/homes/won20/.sbt/0.13/java9-rt-ext-private_build_11_0_5"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="java.class.path" value="/usr/share/sbt/bin/sbt-launch.jar"/><property name="java.vm.vendor" value="Private Build"/><property name="jline.shutdownhook" value="false"/><property name="user.timezone" value="America/Indiana/Indianapolis"/><property name="os.name" value="Linux"/><property name="java.vm.specification.version" value="11"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="user.country" value="US"/><property name="sun.cpu.endian" value="little"/><property name="user.home" value="/homes/won20"/><property name="user.language" value="en"/><property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/><property name="jline.esc.timeout" value="0"/><property name="path.separator" value=":"/><property name="os.version" value="4.15.0-72-generic"/><property name="jna.nosys" value="true"/><property name="java.runtime.name" value="OpenJDK Runtime Environment"/><property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/><property name="jna.platform.library.path" value="/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/lib64:/usr/lib:/lib:/libx32:/lib/i386-linux-gnu:/lib32:/usr/libx32:/usr/lib32:/opt/oracle/instantclient_12_2"/><property name="java.vendor.url.bug" value="Unknown"/><property name="user.dir" value="/u/riker/u87/won20/cs352/proj4/compiler"/><property name="os.arch" value="amd64"/><property name="java.vm.info" value="mixed mode, sharing"/><property name="java.vm.version" value="11.0.5+10-post-Ubuntu-0ubuntu1.118.04"/><property name="java.class.version" value="55.0"/>
    </properties>
                     <testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibFunctions3" time="0.275">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v)))))), FunDef(succ,List(),List(Arg(x,Int,pos)),Int,Prim(+,List(Ref(x), Lit(1)))), FunDef(twice,List(),List(Arg(x,Int,pos)),Int,Prim(+,List(Ref(x), Ref(x))))),Let(x$29,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(App(App(Ref(functionCompose),List(Int, Int, Int),List(Ref(succ), Ref(twice))),List(),List(Lit(39))))))),Let(x$30,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(App(App(Ref(functionCompose),List(Int, Int, Int),List(Ref(succ), Ref(succ))),List(),List(Lit(73))))))),App(Ref(printChar),List(),List(Prim(int-&gt;char,List(App(App(Ref(functionCompose),List(Int, Int, Int),List(Ref(twice), Ref(succ))),List(),List(Lit(4))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v)))))), FunDef(succ,List(),List(Arg(x,Int,pos)),Int,Prim(+,List(Ref(x), Lit(1)))), FunDef(twice,List(),List(Arg(x,Int,pos)),Int,Prim(+,List(Ref(x), Ref(x))))),Let(x$29,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(App(App(Ref(functionCompose),List(Int, Int, Int),List(Ref(succ), Ref(twice))),List(),List(Lit(39))))))),Let(x$30,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(App(App(Ref(functionCompose),List(Int, Int, Int),List(Ref(succ), Ref(succ))),List(),List(Lit(73))))))),App(Ref(printChar),List(),List(Prim(int-&gt;char,List(App(App(Ref(functionCompose),List(Int, Int, Int),List(Ref(twice), Ref(succ))),List(),List(Lit(4))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibFunctions3(LibraryOKTests.scala:22)
	at miniscala.test.ok.LibraryOKTests.testLibFunctions3$(LibraryOKTests.scala:21)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibFunctions3(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testSideEffectingCondition" time="0.003">
                                                 <failure message="scala.MatchError: If(Prim(==,List(Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))), Lit(()))),If(Prim(==,List(Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))), Lit(()))),If(Prim(==,List(Prim(byte-write,List(Lit(10))), Lit(()))),Lit(true),Lit(true)),Lit(true)),Lit(true)) (of class miniscala.CMScalaTreeModule$If)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: If(Prim(==,List(Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))), Lit(()))),If(Prim(==,List(Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))), Lit(()))),If(Prim(==,List(Prim(byte-write,List(Lit(10))), Lit(()))),Lit(true),Lit(true)),Lit(true)),Lit(true)) (of class miniscala.CMScalaTreeModule$If)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.ConditionalOKTests.testSideEffectingCondition(ConditionalOKTests.scala:23)
	at miniscala.test.ok.ConditionalOKTests.testSideEffectingCondition$(ConditionalOKTests.scala:22)
	at miniscala.test.CMScalaToCPS_Blackbox.testSideEffectingCondition(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic3" time="0.003">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(int?,List(Lit(0))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(int?,List(Lit('K'))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(int?,List(Lit(0))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(int?,List(Lit('K'))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic3(PrimitivesOKTests.scala:162)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic3$(PrimitivesOKTests.scala:161)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic3(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic4" time="0.002">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(int?,List(Lit(0))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(int?,List(Lit('K'))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(int?,List(Lit(0))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(int?,List(Lit('K'))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic4(PrimitivesOKTests.scala:170)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic4$(PrimitivesOKTests.scala:169)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic4(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic5" time="0.003">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Lit(true))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Lit(false))),Lit('K'),Lit('O')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Lit(true))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Lit(false))),Lit('K'),Lit('O')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic5(PrimitivesOKTests.scala:178)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic5$(PrimitivesOKTests.scala:177)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic5(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic6" time="0.003">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&lt;,List(Lit(1), Lit(2))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&lt;,List(Lit(1), Lit(1))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&lt;,List(Lit(1), Lit(2))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&lt;,List(Lit(1), Lit(1))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic6(PrimitivesOKTests.scala:186)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic6$(PrimitivesOKTests.scala:185)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic6(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic7" time="0.002">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&lt;,List(Lit(1), Lit(2))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&lt;,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&lt;,List(Lit(1), Lit(2))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&lt;,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic7(PrimitivesOKTests.scala:194)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic7$(PrimitivesOKTests.scala:193)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic7(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic8" time="0.003">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;=,List(Lit(2), Lit(1))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;=,List(Lit(1), Lit(1))),Lit('K'),Lit('O')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;=,List(Lit(2), Lit(1))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;=,List(Lit(1), Lit(1))),Lit('K'),Lit('O')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic8(PrimitivesOKTests.scala:202)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic8$(PrimitivesOKTests.scala:201)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic8(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic9" time="0.002">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;=,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;=,List(Lit(1), Lit(2))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;=,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;=,List(Lit(1), Lit(2))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic9(PrimitivesOKTests.scala:210)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic9$(PrimitivesOKTests.scala:209)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic9(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists10" time="0.059">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake6),List(Char),List(Lit('K'), Lit('O'), Lit('
'), Lit('O'), Lit('K'), Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listDrop),List(Char),List(Ref(l), Lit(3)))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake6),List(Char),List(Lit('K'), Lit('O'), Lit('
'), Lit('O'), Lit('K'), Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listDrop),List(Char),List(Ref(l), Lit(3)))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists10(LibraryOKTests.scala:105)
	at miniscala.test.ok.LibraryOKTests.testLibLists10$(LibraryOKTests.scala:104)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists10(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists11" time="0.045">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l5,List[Int],App(Ref(listMake5),List(Int),List(Lit(0), Lit(0), Lit(0), Lit(0), Lit(0))),Let(l9,List[Int],App(Ref(listTabulate),List(Int),List(Lit(9), LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos)),Int,Ref(x))),Ref(fun$30)))),Let(x$31,Unit,App(Ref(intPrintAsChar),List(),List(Prim(+,List(Lit(70), App(Ref(listLength),List(Int),List(Ref(l9))))))),Let(x$32,Unit,App(Ref(intPrintAsChar),List(),List(Prim(+,List(Lit(70), App(Ref(listLength),List(Int),List(Ref(l5))))))),App(Ref(intPrintAsChar),List(),List(Prim(-,List(Lit(10), App(Ref(listLength),List(Int),List(Prim(block-alloc-2,List(Lit(0)))))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l5,List[Int],App(Ref(listMake5),List(Int),List(Lit(0), Lit(0), Lit(0), Lit(0), Lit(0))),Let(l9,List[Int],App(Ref(listTabulate),List(Int),List(Lit(9), LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos)),Int,Ref(x))),Ref(fun$30)))),Let(x$31,Unit,App(Ref(intPrintAsChar),List(),List(Prim(+,List(Lit(70), App(Ref(listLength),List(Int),List(Ref(l9))))))),Let(x$32,Unit,App(Ref(intPrintAsChar),List(),List(Prim(+,List(Lit(70), App(Ref(listLength),List(Int),List(Ref(l5))))))),App(Ref(intPrintAsChar),List(),List(Prim(-,List(Lit(10), App(Ref(listLength),List(Int),List(Prim(block-alloc-2,List(Lit(0)))))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists11(LibraryOKTests.scala:111)
	at miniscala.test.ok.LibraryOKTests.testLibLists11$(LibraryOKTests.scala:110)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists11(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists12" time="0.039">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake3),List(Char),List(Lit('
'), Lit('K'), Lit('O'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listReverse),List(Char),List(Ref(l)))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake3),List(Char),List(Lit('
'), Lit('K'), Lit('O'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listReverse),List(Char),List(Ref(l)))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists12(LibraryOKTests.scala:121)
	at miniscala.test.ok.LibraryOKTests.testLibLists12$(LibraryOKTests.scala:120)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists12(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists13" time="0.073">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l1,List[Char],App(Ref(listMake2),List(Char),List(Lit('O'), Lit('K'))),Let(l2,List[Char],App(Ref(listMake1),List(Char),List(Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listAppend),List(Char),List(Ref(l1), Ref(l2))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l1,List[Char],App(Ref(listMake2),List(Char),List(Lit('O'), Lit('K'))),Let(l2,List[Char],App(Ref(listMake1),List(Char),List(Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listAppend),List(Char),List(Ref(l1), Ref(l2))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists13(LibraryOKTests.scala:127)
	at miniscala.test.ok.LibraryOKTests.testLibLists13$(LibraryOKTests.scala:126)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists13(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testConditional1" time="0.001">
                                                 <failure message="scala.MatchError: If(Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),Lit(false)),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('*'))))),Lit(true)),Lit(false)) (of class miniscala.CMScalaTreeModule$If)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: If(Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),Lit(false)),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('*'))))),Lit(true)),Lit(false)) (of class miniscala.CMScalaTreeModule$If)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.ConditionalOKTests.testConditional1(ConditionalOKTests.scala:8)
	at miniscala.test.ok.ConditionalOKTests.testConditional1$(ConditionalOKTests.scala:7)
	at miniscala.test.CMScalaToCPS_Blackbox.testConditional1(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testConditional2" time="0.002">
                                                 <failure message="scala.MatchError: If(Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),Lit(true)),Lit(true),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('*'))))),Lit(true))) (of class miniscala.CMScalaTreeModule$If)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: If(Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),Lit(true)),Lit(true),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('*'))))),Lit(true))) (of class miniscala.CMScalaTreeModule$If)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.ConditionalOKTests.testConditional2(ConditionalOKTests.scala:15)
	at miniscala.test.ok.ConditionalOKTests.testConditional2$(ConditionalOKTests.scala:14)
	at miniscala.test.CMScalaToCPS_Blackbox.testConditional2(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testConditional4" time="0.001">
                                                 <failure message="scala.MatchError: If(If(Prim(==,List(Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))), Lit(()))),Lit(true),Lit(true)),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('T')))))) (of class miniscala.CMScalaTreeModule$If)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: If(If(Prim(==,List(Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))), Lit(()))),Lit(true),Lit(true)),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('T')))))) (of class miniscala.CMScalaTreeModule$If)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.ConditionalOKTests.testConditional4(ConditionalOKTests.scala:39)
	at miniscala.test.ok.ConditionalOKTests.testConditional4$(ConditionalOKTests.scala:38)
	at miniscala.test.CMScalaToCPS_Blackbox.testConditional4(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibStrings1" time="0.035">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(x$32,Unit,App(Ref(printString),List(),List(Let(str$29,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$31,Unit,Prim(block-set,List(Ref(str$29), Lit(0), Lit('O'))),Let(x$30,Unit,Prim(block-set,List(Ref(str$29), Lit(1), Lit('K'))),Ref(str$29)))))),App(Ref(printChar),List(),List(Lit('
')))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(x$32,Unit,App(Ref(printString),List(),List(Let(str$29,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$31,Unit,Prim(block-set,List(Ref(str$29), Lit(0), Lit('O'))),Let(x$30,Unit,Prim(block-set,List(Ref(str$29), Lit(1), Lit('K'))),Ref(str$29)))))),App(Ref(printChar),List(),List(Lit('
')))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibStrings1(LibraryOKTests.scala:134)
	at miniscala.test.ok.LibraryOKTests.testLibStrings1$(LibraryOKTests.scala:133)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibStrings1(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibStrings2" time="0.034">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(s,Array[Char],Let(str$29,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$31,Unit,Prim(block-set,List(Ref(str$29), Lit(0), Lit('K'))),Let(x$30,Unit,Prim(block-set,List(Ref(str$29), Lit(1), Lit('O'))),Ref(str$29)))),Let(x$32,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Lit(1))))),Let(x$33,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Lit(0))))),App(Ref(printChar),List(),List(Lit('
')))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(s,Array[Char],Let(str$29,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$31,Unit,Prim(block-set,List(Ref(str$29), Lit(0), Lit('K'))),Let(x$30,Unit,Prim(block-set,List(Ref(str$29), Lit(1), Lit('O'))),Ref(str$29)))),Let(x$32,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Lit(1))))),Let(x$33,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Lit(0))))),App(Ref(printChar),List(),List(Lit('
')))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibStrings2(LibraryOKTests.scala:140)
	at miniscala.test.ok.LibraryOKTests.testLibStrings2$(LibraryOKTests.scala:139)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibStrings2(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibStrings3" time="0.06">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(x$109,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(Prim(block-length,List(Let(str$29,Array[Char],Prim(block-alloc-1,List(Lit(79))),Let(x$108,Unit,Prim(block-set,List(Ref(str$29), Lit(0), Lit('O'))),Let(x$107,Unit,Prim(block-set,List(Ref(str$29), Lit(1), Lit('O'))),Let(x$106,Unit,Prim(block-set,List(Ref(str$29), Lit(2), Lit('O'))),Let(x$105,Unit,Prim(block-set,List(Ref(str$29), Lit(3), Lit('O'))),Let(x$104,Unit,Prim(block-set,List(Ref(str$29), Lit(4), Lit('O'))),Let(x$103,Unit,Prim(block-set,List(Ref(str$29), Lit(5), Lit('O'))),Let(x$102,Unit,Prim(block-set,List(Ref(str$29), Lit(6), Lit('O'))),Let(x$101,Unit,Prim(block-set,List(Ref(str$29), Lit(7), Lit('O'))),Let(x$100,Unit,Prim(block-set,List(Ref(str$29), Lit(8), Lit('O'))),Let(x$99,Unit,Prim(block-set,List(Ref(str$29), Lit(9), Lit('O'))),Let(x$98,Unit,Prim(block-set,List(Ref(str$29), Lit(10), Lit('O'))),Let(x$97,Unit,Prim(block-set,List(Ref(str$29), Lit(11), Lit('O'))),Let(x$96,Unit,Prim(block-set,List(Ref(str$29), Lit(12), Lit('O'))),Let(x$95,Unit,Prim(block-set,List(Ref(str$29), Lit(13), Lit('O'))),Let(x$94,Unit,Prim(block-set,List(Ref(str$29), Lit(14), Lit('O'))),Let(x$93,Unit,Prim(block-set,List(Ref(str$29), Lit(15), Lit('O'))),Let(x$92,Unit,Prim(block-set,List(Ref(str$29), Lit(16), Lit('O'))),Let(x$91,Unit,Prim(block-set,List(Ref(str$29), Lit(17), Lit('O'))),Let(x$90,Unit,Prim(block-set,List(Ref(str$29), Lit(18), Lit('O'))),Let(x$89,Unit,Prim(block-set,List(Ref(str$29), Lit(19), Lit('O'))),Let(x$88,Unit,Prim(block-set,List(Ref(str$29), Lit(20), Lit('O'))),Let(x$87,Unit,Prim(block-set,List(Ref(str$29), Lit(21), Lit('O'))),Let(x$86,Unit,Prim(block-set,List(Ref(str$29), Lit(22), Lit('O'))),Let(x$85,Unit,Prim(block-set,List(Ref(str$29), Lit(23), Lit('O'))),Let(x$84,Unit,Prim(block-set,List(Ref(str$29), Lit(24), Lit('O'))),Let(x$83,Unit,Prim(block-set,List(Ref(str$29), Lit(25), Lit('O'))),Let(x$82,Unit,Prim(block-set,List(Ref(str$29), Lit(26), Lit('O'))),Let(x$81,Unit,Prim(block-set,List(Ref(str$29), Lit(27), Lit('O'))),Let(x$80,Unit,Prim(block-set,List(Ref(str$29), Lit(28), Lit('O'))),Let(x$79,Unit,Prim(block-set,List(Ref(str$29), Lit(29), Lit('O'))),Let(x$78,Unit,Prim(block-set,List(Ref(str$29), Lit(30), Lit('O'))),Let(x$77,Unit,Prim(block-set,List(Ref(str$29), Lit(31), Lit('O'))),Let(x$76,Unit,Prim(block-set,List(Ref(str$29), Lit(32), Lit('O'))),Let(x$75,Unit,Prim(block-set,List(Ref(str$29), Lit(33), Lit('O'))),Let(x$74,Unit,Prim(block-set,List(Ref(str$29), Lit(34), Lit('O'))),Let(x$73,Unit,Prim(block-set,List(Ref(str$29), Lit(35), Lit('O'))),Let(x$72,Unit,Prim(block-set,List(Ref(str$29), Lit(36), Lit('O'))),Let(x$71,Unit,Prim(block-set,List(Ref(str$29), Lit(37), Lit('O'))),Let(x$70,Unit,Prim(block-set,List(Ref(str$29), Lit(38), Lit('O'))),Let(x$69,Unit,Prim(block-set,List(Ref(str$29), Lit(39), Lit('O'))),Let(x$68,Unit,Prim(block-set,List(Ref(str$29), Lit(40), Lit('O'))),Let(x$67,Unit,Prim(block-set,List(Ref(str$29), Lit(41), Lit('O'))),Let(x$66,Unit,Prim(block-set,List(Ref(str$29), Lit(42), Lit('O'))),Let(x$65,Unit,Prim(block-set,List(Ref(str$29), Lit(43), Lit('O'))),Let(x$64,Unit,Prim(block-set,List(Ref(str$29), Lit(44), Lit('O'))),Let(x$63,Unit,Prim(block-set,List(Ref(str$29), Lit(45), Lit('O'))),Let(x$62,Unit,Prim(block-set,List(Ref(str$29), Lit(46), Lit('O'))),Let(x$61,Unit,Prim(block-set,List(Ref(str$29), Lit(47), Lit('O'))),Let(x$60,Unit,Prim(block-set,List(Ref(str$29), Lit(48), Lit('O'))),Let(x$59,Unit,Prim(block-set,List(Ref(str$29), Lit(49), Lit('O'))),Let(x$58,Unit,Prim(block-set,List(Ref(str$29), Lit(50), Lit('O'))),Let(x$57,Unit,Prim(block-set,List(Ref(str$29), Lit(51), Lit('O'))),Let(x$56,Unit,Prim(block-set,List(Ref(str$29), Lit(52), Lit('O'))),Let(x$55,Unit,Prim(block-set,List(Ref(str$29), Lit(53), Lit('O'))),Let(x$54,Unit,Prim(block-set,List(Ref(str$29), Lit(54), Lit('O'))),Let(x$53,Unit,Prim(block-set,List(Ref(str$29), Lit(55), Lit('O'))),Let(x$52,Unit,Prim(block-set,List(Ref(str$29), Lit(56), Lit('O'))),Let(x$51,Unit,Prim(block-set,List(Ref(str$29), Lit(57), Lit('O'))),Let(x$50,Unit,Prim(block-set,List(Ref(str$29), Lit(58), Lit('O'))),Let(x$49,Unit,Prim(block-set,List(Ref(str$29), Lit(59), Lit('O'))),Let(x$48,Unit,Prim(block-set,List(Ref(str$29), Lit(60), Lit('O'))),Let(x$47,Unit,Prim(block-set,List(Ref(str$29), Lit(61), Lit('O'))),Let(x$46,Unit,Prim(block-set,List(Ref(str$29), Lit(62), Lit('O'))),Let(x$45,Unit,Prim(block-set,List(Ref(str$29), Lit(63), Lit('O'))),Let(x$44,Unit,Prim(block-set,List(Ref(str$29), Lit(64), Lit('O'))),Let(x$43,Unit,Prim(block-set,List(Ref(str$29), Lit(65), Lit('O'))),Let(x$42,Unit,Prim(block-set,List(Ref(str$29), Lit(66), Lit('O'))),Let(x$41,Unit,Prim(block-set,List(Ref(str$29), Lit(67), Lit('O'))),Let(x$40,Unit,Prim(block-set,List(Ref(str$29), Lit(68), Lit('O'))),Let(x$39,Unit,Prim(block-set,List(Ref(str$29), Lit(69), Lit('O'))),Let(x$38,Unit,Prim(block-set,List(Ref(str$29), Lit(70), Lit('O'))),Let(x$37,Unit,Prim(block-set,List(Ref(str$29), Lit(71), Lit('O'))),Let(x$36,Unit,Prim(block-set,List(Ref(str$29), Lit(72), Lit('O'))),Let(x$35,Unit,Prim(block-set,List(Ref(str$29), Lit(73), Lit('O'))),Let(x$34,Unit,Prim(block-set,List(Ref(str$29), Lit(74), Lit('O'))),Let(x$33,Unit,Prim(block-set,List(Ref(str$29), Lit(75), Lit('O'))),Let(x$32,Unit,Prim(block-set,List(Ref(str$29), Lit(76), Lit('O'))),Let(x$31,Unit,Prim(block-set,List(Ref(str$29), Lit(77), Lit('O'))),Let(x$30,Unit,Prim(block-set,List(Ref(str$29), Lit(78), Lit('O'))),Ref(str$29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),Let(x$186,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(Prim(block-length,List(Let(str$110,Array[Char],Prim(block-alloc-1,List(Lit(75))),Let(x$185,Unit,Prim(block-set,List(Ref(str$110), Lit(0), Lit('K'))),Let(x$184,Unit,Prim(block-set,List(Ref(str$110), Lit(1), Lit('K'))),Let(x$183,Unit,Prim(block-set,List(Ref(str$110), Lit(2), Lit('K'))),Let(x$182,Unit,Prim(block-set,List(Ref(str$110), Lit(3), Lit('K'))),Let(x$181,Unit,Prim(block-set,List(Ref(str$110), Lit(4), Lit('K'))),Let(x$180,Unit,Prim(block-set,List(Ref(str$110), Lit(5), Lit('K'))),Let(x$179,Unit,Prim(block-set,List(Ref(str$110), Lit(6), Lit('K'))),Let(x$178,Unit,Prim(block-set,List(Ref(str$110), Lit(7), Lit('K'))),Let(x$177,Unit,Prim(block-set,List(Ref(str$110), Lit(8), Lit('K'))),Let(x$176,Unit,Prim(block-set,List(Ref(str$110), Lit(9), Lit('K'))),Let(x$175,Unit,Prim(block-set,List(Ref(str$110), Lit(10), Lit('K'))),Let(x$174,Unit,Prim(block-set,List(Ref(str$110), Lit(11), Lit('K'))),Let(x$173,Unit,Prim(block-set,List(Ref(str$110), Lit(12), Lit('K'))),Let(x$172,Unit,Prim(block-set,List(Ref(str$110), Lit(13), Lit('K'))),Let(x$171,Unit,Prim(block-set,List(Ref(str$110), Lit(14), Lit('K'))),Let(x$170,Unit,Prim(block-set,List(Ref(str$110), Lit(15), Lit('K'))),Let(x$169,Unit,Prim(block-set,List(Ref(str$110), Lit(16), Lit('K'))),Let(x$168,Unit,Prim(block-set,List(Ref(str$110), Lit(17), Lit('K'))),Let(x$167,Unit,Prim(block-set,List(Ref(str$110), Lit(18), Lit('K'))),Let(x$166,Unit,Prim(block-set,List(Ref(str$110), Lit(19), Lit('K'))),Let(x$165,Unit,Prim(block-set,List(Ref(str$110), Lit(20), Lit('K'))),Let(x$164,Unit,Prim(block-set,List(Ref(str$110), Lit(21), Lit('K'))),Let(x$163,Unit,Prim(block-set,List(Ref(str$110), Lit(22), Lit('K'))),Let(x$162,Unit,Prim(block-set,List(Ref(str$110), Lit(23), Lit('K'))),Let(x$161,Unit,Prim(block-set,List(Ref(str$110), Lit(24), Lit('K'))),Let(x$160,Unit,Prim(block-set,List(Ref(str$110), Lit(25), Lit('K'))),Let(x$159,Unit,Prim(block-set,List(Ref(str$110), Lit(26), Lit('K'))),Let(x$158,Unit,Prim(block-set,List(Ref(str$110), Lit(27), Lit('K'))),Let(x$157,Unit,Prim(block-set,List(Ref(str$110), Lit(28), Lit('K'))),Let(x$156,Unit,Prim(block-set,List(Ref(str$110), Lit(29), Lit('K'))),Let(x$155,Unit,Prim(block-set,List(Ref(str$110), Lit(30), Lit('K'))),Let(x$154,Unit,Prim(block-set,List(Ref(str$110), Lit(31), Lit('K'))),Let(x$153,Unit,Prim(block-set,List(Ref(str$110), Lit(32), Lit('K'))),Let(x$152,Unit,Prim(block-set,List(Ref(str$110), Lit(33), Lit('K'))),Let(x$151,Unit,Prim(block-set,List(Ref(str$110), Lit(34), Lit('K'))),Let(x$150,Unit,Prim(block-set,List(Ref(str$110), Lit(35), Lit('K'))),Let(x$149,Unit,Prim(block-set,List(Ref(str$110), Lit(36), Lit('K'))),Let(x$148,Unit,Prim(block-set,List(Ref(str$110), Lit(37), Lit('K'))),Let(x$147,Unit,Prim(block-set,List(Ref(str$110), Lit(38), Lit('K'))),Let(x$146,Unit,Prim(block-set,List(Ref(str$110), Lit(39), Lit('K'))),Let(x$145,Unit,Prim(block-set,List(Ref(str$110), Lit(40), Lit('K'))),Let(x$144,Unit,Prim(block-set,List(Ref(str$110), Lit(41), Lit('K'))),Let(x$143,Unit,Prim(block-set,List(Ref(str$110), Lit(42), Lit('K'))),Let(x$142,Unit,Prim(block-set,List(Ref(str$110), Lit(43), Lit('K'))),Let(x$141,Unit,Prim(block-set,List(Ref(str$110), Lit(44), Lit('K'))),Let(x$140,Unit,Prim(block-set,List(Ref(str$110), Lit(45), Lit('K'))),Let(x$139,Unit,Prim(block-set,List(Ref(str$110), Lit(46), Lit('K'))),Let(x$138,Unit,Prim(block-set,List(Ref(str$110), Lit(47), Lit('K'))),Let(x$137,Unit,Prim(block-set,List(Ref(str$110), Lit(48), Lit('K'))),Let(x$136,Unit,Prim(block-set,List(Ref(str$110), Lit(49), Lit('K'))),Let(x$135,Unit,Prim(block-set,List(Ref(str$110), Lit(50), Lit('K'))),Let(x$134,Unit,Prim(block-set,List(Ref(str$110), Lit(51), Lit('K'))),Let(x$133,Unit,Prim(block-set,List(Ref(str$110), Lit(52), Lit('K'))),Let(x$132,Unit,Prim(block-set,List(Ref(str$110), Lit(53), Lit('K'))),Let(x$131,Unit,Prim(block-set,List(Ref(str$110), Lit(54), Lit('K'))),Let(x$130,Unit,Prim(block-set,List(Ref(str$110), Lit(55), Lit('K'))),Let(x$129,Unit,Prim(block-set,List(Ref(str$110), Lit(56), Lit('K'))),Let(x$128,Unit,Prim(block-set,List(Ref(str$110), Lit(57), Lit('K'))),Let(x$127,Unit,Prim(block-set,List(Ref(str$110), Lit(58), Lit('K'))),Let(x$126,Unit,Prim(block-set,List(Ref(str$110), Lit(59), Lit('K'))),Let(x$125,Unit,Prim(block-set,List(Ref(str$110), Lit(60), Lit('K'))),Let(x$124,Unit,Prim(block-set,List(Ref(str$110), Lit(61), Lit('K'))),Let(x$123,Unit,Prim(block-set,List(Ref(str$110), Lit(62), Lit('K'))),Let(x$122,Unit,Prim(block-set,List(Ref(str$110), Lit(63), Lit('K'))),Let(x$121,Unit,Prim(block-set,List(Ref(str$110), Lit(64), Lit('K'))),Let(x$120,Unit,Prim(block-set,List(Ref(str$110), Lit(65), Lit('K'))),Let(x$119,Unit,Prim(block-set,List(Ref(str$110), Lit(66), Lit('K'))),Let(x$118,Unit,Prim(block-set,List(Ref(str$110), Lit(67), Lit('K'))),Let(x$117,Unit,Prim(block-set,List(Ref(str$110), Lit(68), Lit('K'))),Let(x$116,Unit,Prim(block-set,List(Ref(str$110), Lit(69), Lit('K'))),Let(x$115,Unit,Prim(block-set,List(Ref(str$110), Lit(70), Lit('K'))),Let(x$114,Unit,Prim(block-set,List(Ref(str$110), Lit(71), Lit('K'))),Let(x$113,Unit,Prim(block-set,List(Ref(str$110), Lit(72), Lit('K'))),Let(x$112,Unit,Prim(block-set,List(Ref(str$110), Lit(73), Lit('K'))),Let(x$111,Unit,Prim(block-set,List(Ref(str$110), Lit(74), Lit('K'))),Ref(str$110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),App(Ref(printChar),List(),List(Prim(int-&gt;char,List(Prim(block-length,List(Let(str$187,Array[Char],Prim(block-alloc-1,List(Lit(10))),Let(x$197,Unit,Prim(block-set,List(Ref(str$187), Lit(0), Lit('1'))),Let(x$196,Unit,Prim(block-set,List(Ref(str$187), Lit(1), Lit('1'))),Let(x$195,Unit,Prim(block-set,List(Ref(str$187), Lit(2), Lit('1'))),Let(x$194,Unit,Prim(block-set,List(Ref(str$187), Lit(3), Lit('1'))),Let(x$193,Unit,Prim(block-set,List(Ref(str$187), Lit(4), Lit('1'))),Let(x$192,Unit,Prim(block-set,List(Ref(str$187), Lit(5), Lit('0'))),Let(x$191,Unit,Prim(block-set,List(Ref(str$187), Lit(6), Lit('0'))),Let(x$190,Unit,Prim(block-set,List(Ref(str$187), Lit(7), Lit('0'))),Let(x$189,Unit,Prim(block-set,List(Ref(str$187), Lit(8), Lit('0'))),Let(x$188,Unit,Prim(block-set,List(Ref(str$187), Lit(9), Lit('0'))),Ref(str$187)))))))))))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(x$109,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(Prim(block-length,List(Let(str$29,Array[Char],Prim(block-alloc-1,List(Lit(79))),Let(x$108,Unit,Prim(block-set,List(Ref(str$29), Lit(0), Lit('O'))),Let(x$107,Unit,Prim(block-set,List(Ref(str$29), Lit(1), Lit('O'))),Let(x$106,Unit,Prim(block-set,List(Ref(str$29), Lit(2), Lit('O'))),Let(x$105,Unit,Prim(block-set,List(Ref(str$29), Lit(3), Lit('O'))),Let(x$104,Unit,Prim(block-set,List(Ref(str$29), Lit(4), Lit('O'))),Let(x$103,Unit,Prim(block-set,List(Ref(str$29), Lit(5), Lit('O'))),Let(x$102,Unit,Prim(block-set,List(Ref(str$29), Lit(6), Lit('O'))),Let(x$101,Unit,Prim(block-set,List(Ref(str$29), Lit(7), Lit('O'))),Let(x$100,Unit,Prim(block-set,List(Ref(str$29), Lit(8), Lit('O'))),Let(x$99,Unit,Prim(block-set,List(Ref(str$29), Lit(9), Lit('O'))),Let(x$98,Unit,Prim(block-set,List(Ref(str$29), Lit(10), Lit('O'))),Let(x$97,Unit,Prim(block-set,List(Ref(str$29), Lit(11), Lit('O'))),Let(x$96,Unit,Prim(block-set,List(Ref(str$29), Lit(12), Lit('O'))),Let(x$95,Unit,Prim(block-set,List(Ref(str$29), Lit(13), Lit('O'))),Let(x$94,Unit,Prim(block-set,List(Ref(str$29), Lit(14), Lit('O'))),Let(x$93,Unit,Prim(block-set,List(Ref(str$29), Lit(15), Lit('O'))),Let(x$92,Unit,Prim(block-set,List(Ref(str$29), Lit(16), Lit('O'))),Let(x$91,Unit,Prim(block-set,List(Ref(str$29), Lit(17), Lit('O'))),Let(x$90,Unit,Prim(block-set,List(Ref(str$29), Lit(18), Lit('O'))),Let(x$89,Unit,Prim(block-set,List(Ref(str$29), Lit(19), Lit('O'))),Let(x$88,Unit,Prim(block-set,List(Ref(str$29), Lit(20), Lit('O'))),Let(x$87,Unit,Prim(block-set,List(Ref(str$29), Lit(21), Lit('O'))),Let(x$86,Unit,Prim(block-set,List(Ref(str$29), Lit(22), Lit('O'))),Let(x$85,Unit,Prim(block-set,List(Ref(str$29), Lit(23), Lit('O'))),Let(x$84,Unit,Prim(block-set,List(Ref(str$29), Lit(24), Lit('O'))),Let(x$83,Unit,Prim(block-set,List(Ref(str$29), Lit(25), Lit('O'))),Let(x$82,Unit,Prim(block-set,List(Ref(str$29), Lit(26), Lit('O'))),Let(x$81,Unit,Prim(block-set,List(Ref(str$29), Lit(27), Lit('O'))),Let(x$80,Unit,Prim(block-set,List(Ref(str$29), Lit(28), Lit('O'))),Let(x$79,Unit,Prim(block-set,List(Ref(str$29), Lit(29), Lit('O'))),Let(x$78,Unit,Prim(block-set,List(Ref(str$29), Lit(30), Lit('O'))),Let(x$77,Unit,Prim(block-set,List(Ref(str$29), Lit(31), Lit('O'))),Let(x$76,Unit,Prim(block-set,List(Ref(str$29), Lit(32), Lit('O'))),Let(x$75,Unit,Prim(block-set,List(Ref(str$29), Lit(33), Lit('O'))),Let(x$74,Unit,Prim(block-set,List(Ref(str$29), Lit(34), Lit('O'))),Let(x$73,Unit,Prim(block-set,List(Ref(str$29), Lit(35), Lit('O'))),Let(x$72,Unit,Prim(block-set,List(Ref(str$29), Lit(36), Lit('O'))),Let(x$71,Unit,Prim(block-set,List(Ref(str$29), Lit(37), Lit('O'))),Let(x$70,Unit,Prim(block-set,List(Ref(str$29), Lit(38), Lit('O'))),Let(x$69,Unit,Prim(block-set,List(Ref(str$29), Lit(39), Lit('O'))),Let(x$68,Unit,Prim(block-set,List(Ref(str$29), Lit(40), Lit('O'))),Let(x$67,Unit,Prim(block-set,List(Ref(str$29), Lit(41), Lit('O'))),Let(x$66,Unit,Prim(block-set,List(Ref(str$29), Lit(42), Lit('O'))),Let(x$65,Unit,Prim(block-set,List(Ref(str$29), Lit(43), Lit('O'))),Let(x$64,Unit,Prim(block-set,List(Ref(str$29), Lit(44), Lit('O'))),Let(x$63,Unit,Prim(block-set,List(Ref(str$29), Lit(45), Lit('O'))),Let(x$62,Unit,Prim(block-set,List(Ref(str$29), Lit(46), Lit('O'))),Let(x$61,Unit,Prim(block-set,List(Ref(str$29), Lit(47), Lit('O'))),Let(x$60,Unit,Prim(block-set,List(Ref(str$29), Lit(48), Lit('O'))),Let(x$59,Unit,Prim(block-set,List(Ref(str$29), Lit(49), Lit('O'))),Let(x$58,Unit,Prim(block-set,List(Ref(str$29), Lit(50), Lit('O'))),Let(x$57,Unit,Prim(block-set,List(Ref(str$29), Lit(51), Lit('O'))),Let(x$56,Unit,Prim(block-set,List(Ref(str$29), Lit(52), Lit('O'))),Let(x$55,Unit,Prim(block-set,List(Ref(str$29), Lit(53), Lit('O'))),Let(x$54,Unit,Prim(block-set,List(Ref(str$29), Lit(54), Lit('O'))),Let(x$53,Unit,Prim(block-set,List(Ref(str$29), Lit(55), Lit('O'))),Let(x$52,Unit,Prim(block-set,List(Ref(str$29), Lit(56), Lit('O'))),Let(x$51,Unit,Prim(block-set,List(Ref(str$29), Lit(57), Lit('O'))),Let(x$50,Unit,Prim(block-set,List(Ref(str$29), Lit(58), Lit('O'))),Let(x$49,Unit,Prim(block-set,List(Ref(str$29), Lit(59), Lit('O'))),Let(x$48,Unit,Prim(block-set,List(Ref(str$29), Lit(60), Lit('O'))),Let(x$47,Unit,Prim(block-set,List(Ref(str$29), Lit(61), Lit('O'))),Let(x$46,Unit,Prim(block-set,List(Ref(str$29), Lit(62), Lit('O'))),Let(x$45,Unit,Prim(block-set,List(Ref(str$29), Lit(63), Lit('O'))),Let(x$44,Unit,Prim(block-set,List(Ref(str$29), Lit(64), Lit('O'))),Let(x$43,Unit,Prim(block-set,List(Ref(str$29), Lit(65), Lit('O'))),Let(x$42,Unit,Prim(block-set,List(Ref(str$29), Lit(66), Lit('O'))),Let(x$41,Unit,Prim(block-set,List(Ref(str$29), Lit(67), Lit('O'))),Let(x$40,Unit,Prim(block-set,List(Ref(str$29), Lit(68), Lit('O'))),Let(x$39,Unit,Prim(block-set,List(Ref(str$29), Lit(69), Lit('O'))),Let(x$38,Unit,Prim(block-set,List(Ref(str$29), Lit(70), Lit('O'))),Let(x$37,Unit,Prim(block-set,List(Ref(str$29), Lit(71), Lit('O'))),Let(x$36,Unit,Prim(block-set,List(Ref(str$29), Lit(72), Lit('O'))),Let(x$35,Unit,Prim(block-set,List(Ref(str$29), Lit(73), Lit('O'))),Let(x$34,Unit,Prim(block-set,List(Ref(str$29), Lit(74), Lit('O'))),Let(x$33,Unit,Prim(block-set,List(Ref(str$29), Lit(75), Lit('O'))),Let(x$32,Unit,Prim(block-set,List(Ref(str$29), Lit(76), Lit('O'))),Let(x$31,Unit,Prim(block-set,List(Ref(str$29), Lit(77), Lit('O'))),Let(x$30,Unit,Prim(block-set,List(Ref(str$29), Lit(78), Lit('O'))),Ref(str$29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),Let(x$186,Unit,App(Ref(printChar),List(),List(Prim(int-&gt;char,List(Prim(block-length,List(Let(str$110,Array[Char],Prim(block-alloc-1,List(Lit(75))),Let(x$185,Unit,Prim(block-set,List(Ref(str$110), Lit(0), Lit('K'))),Let(x$184,Unit,Prim(block-set,List(Ref(str$110), Lit(1), Lit('K'))),Let(x$183,Unit,Prim(block-set,List(Ref(str$110), Lit(2), Lit('K'))),Let(x$182,Unit,Prim(block-set,List(Ref(str$110), Lit(3), Lit('K'))),Let(x$181,Unit,Prim(block-set,List(Ref(str$110), Lit(4), Lit('K'))),Let(x$180,Unit,Prim(block-set,List(Ref(str$110), Lit(5), Lit('K'))),Let(x$179,Unit,Prim(block-set,List(Ref(str$110), Lit(6), Lit('K'))),Let(x$178,Unit,Prim(block-set,List(Ref(str$110), Lit(7), Lit('K'))),Let(x$177,Unit,Prim(block-set,List(Ref(str$110), Lit(8), Lit('K'))),Let(x$176,Unit,Prim(block-set,List(Ref(str$110), Lit(9), Lit('K'))),Let(x$175,Unit,Prim(block-set,List(Ref(str$110), Lit(10), Lit('K'))),Let(x$174,Unit,Prim(block-set,List(Ref(str$110), Lit(11), Lit('K'))),Let(x$173,Unit,Prim(block-set,List(Ref(str$110), Lit(12), Lit('K'))),Let(x$172,Unit,Prim(block-set,List(Ref(str$110), Lit(13), Lit('K'))),Let(x$171,Unit,Prim(block-set,List(Ref(str$110), Lit(14), Lit('K'))),Let(x$170,Unit,Prim(block-set,List(Ref(str$110), Lit(15), Lit('K'))),Let(x$169,Unit,Prim(block-set,List(Ref(str$110), Lit(16), Lit('K'))),Let(x$168,Unit,Prim(block-set,List(Ref(str$110), Lit(17), Lit('K'))),Let(x$167,Unit,Prim(block-set,List(Ref(str$110), Lit(18), Lit('K'))),Let(x$166,Unit,Prim(block-set,List(Ref(str$110), Lit(19), Lit('K'))),Let(x$165,Unit,Prim(block-set,List(Ref(str$110), Lit(20), Lit('K'))),Let(x$164,Unit,Prim(block-set,List(Ref(str$110), Lit(21), Lit('K'))),Let(x$163,Unit,Prim(block-set,List(Ref(str$110), Lit(22), Lit('K'))),Let(x$162,Unit,Prim(block-set,List(Ref(str$110), Lit(23), Lit('K'))),Let(x$161,Unit,Prim(block-set,List(Ref(str$110), Lit(24), Lit('K'))),Let(x$160,Unit,Prim(block-set,List(Ref(str$110), Lit(25), Lit('K'))),Let(x$159,Unit,Prim(block-set,List(Ref(str$110), Lit(26), Lit('K'))),Let(x$158,Unit,Prim(block-set,List(Ref(str$110), Lit(27), Lit('K'))),Let(x$157,Unit,Prim(block-set,List(Ref(str$110), Lit(28), Lit('K'))),Let(x$156,Unit,Prim(block-set,List(Ref(str$110), Lit(29), Lit('K'))),Let(x$155,Unit,Prim(block-set,List(Ref(str$110), Lit(30), Lit('K'))),Let(x$154,Unit,Prim(block-set,List(Ref(str$110), Lit(31), Lit('K'))),Let(x$153,Unit,Prim(block-set,List(Ref(str$110), Lit(32), Lit('K'))),Let(x$152,Unit,Prim(block-set,List(Ref(str$110), Lit(33), Lit('K'))),Let(x$151,Unit,Prim(block-set,List(Ref(str$110), Lit(34), Lit('K'))),Let(x$150,Unit,Prim(block-set,List(Ref(str$110), Lit(35), Lit('K'))),Let(x$149,Unit,Prim(block-set,List(Ref(str$110), Lit(36), Lit('K'))),Let(x$148,Unit,Prim(block-set,List(Ref(str$110), Lit(37), Lit('K'))),Let(x$147,Unit,Prim(block-set,List(Ref(str$110), Lit(38), Lit('K'))),Let(x$146,Unit,Prim(block-set,List(Ref(str$110), Lit(39), Lit('K'))),Let(x$145,Unit,Prim(block-set,List(Ref(str$110), Lit(40), Lit('K'))),Let(x$144,Unit,Prim(block-set,List(Ref(str$110), Lit(41), Lit('K'))),Let(x$143,Unit,Prim(block-set,List(Ref(str$110), Lit(42), Lit('K'))),Let(x$142,Unit,Prim(block-set,List(Ref(str$110), Lit(43), Lit('K'))),Let(x$141,Unit,Prim(block-set,List(Ref(str$110), Lit(44), Lit('K'))),Let(x$140,Unit,Prim(block-set,List(Ref(str$110), Lit(45), Lit('K'))),Let(x$139,Unit,Prim(block-set,List(Ref(str$110), Lit(46), Lit('K'))),Let(x$138,Unit,Prim(block-set,List(Ref(str$110), Lit(47), Lit('K'))),Let(x$137,Unit,Prim(block-set,List(Ref(str$110), Lit(48), Lit('K'))),Let(x$136,Unit,Prim(block-set,List(Ref(str$110), Lit(49), Lit('K'))),Let(x$135,Unit,Prim(block-set,List(Ref(str$110), Lit(50), Lit('K'))),Let(x$134,Unit,Prim(block-set,List(Ref(str$110), Lit(51), Lit('K'))),Let(x$133,Unit,Prim(block-set,List(Ref(str$110), Lit(52), Lit('K'))),Let(x$132,Unit,Prim(block-set,List(Ref(str$110), Lit(53), Lit('K'))),Let(x$131,Unit,Prim(block-set,List(Ref(str$110), Lit(54), Lit('K'))),Let(x$130,Unit,Prim(block-set,List(Ref(str$110), Lit(55), Lit('K'))),Let(x$129,Unit,Prim(block-set,List(Ref(str$110), Lit(56), Lit('K'))),Let(x$128,Unit,Prim(block-set,List(Ref(str$110), Lit(57), Lit('K'))),Let(x$127,Unit,Prim(block-set,List(Ref(str$110), Lit(58), Lit('K'))),Let(x$126,Unit,Prim(block-set,List(Ref(str$110), Lit(59), Lit('K'))),Let(x$125,Unit,Prim(block-set,List(Ref(str$110), Lit(60), Lit('K'))),Let(x$124,Unit,Prim(block-set,List(Ref(str$110), Lit(61), Lit('K'))),Let(x$123,Unit,Prim(block-set,List(Ref(str$110), Lit(62), Lit('K'))),Let(x$122,Unit,Prim(block-set,List(Ref(str$110), Lit(63), Lit('K'))),Let(x$121,Unit,Prim(block-set,List(Ref(str$110), Lit(64), Lit('K'))),Let(x$120,Unit,Prim(block-set,List(Ref(str$110), Lit(65), Lit('K'))),Let(x$119,Unit,Prim(block-set,List(Ref(str$110), Lit(66), Lit('K'))),Let(x$118,Unit,Prim(block-set,List(Ref(str$110), Lit(67), Lit('K'))),Let(x$117,Unit,Prim(block-set,List(Ref(str$110), Lit(68), Lit('K'))),Let(x$116,Unit,Prim(block-set,List(Ref(str$110), Lit(69), Lit('K'))),Let(x$115,Unit,Prim(block-set,List(Ref(str$110), Lit(70), Lit('K'))),Let(x$114,Unit,Prim(block-set,List(Ref(str$110), Lit(71), Lit('K'))),Let(x$113,Unit,Prim(block-set,List(Ref(str$110), Lit(72), Lit('K'))),Let(x$112,Unit,Prim(block-set,List(Ref(str$110), Lit(73), Lit('K'))),Let(x$111,Unit,Prim(block-set,List(Ref(str$110), Lit(74), Lit('K'))),Ref(str$110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),App(Ref(printChar),List(),List(Prim(int-&gt;char,List(Prim(block-length,List(Let(str$187,Array[Char],Prim(block-alloc-1,List(Lit(10))),Let(x$197,Unit,Prim(block-set,List(Ref(str$187), Lit(0), Lit('1'))),Let(x$196,Unit,Prim(block-set,List(Ref(str$187), Lit(1), Lit('1'))),Let(x$195,Unit,Prim(block-set,List(Ref(str$187), Lit(2), Lit('1'))),Let(x$194,Unit,Prim(block-set,List(Ref(str$187), Lit(3), Lit('1'))),Let(x$193,Unit,Prim(block-set,List(Ref(str$187), Lit(4), Lit('1'))),Let(x$192,Unit,Prim(block-set,List(Ref(str$187), Lit(5), Lit('0'))),Let(x$191,Unit,Prim(block-set,List(Ref(str$187), Lit(6), Lit('0'))),Let(x$190,Unit,Prim(block-set,List(Ref(str$187), Lit(7), Lit('0'))),Let(x$189,Unit,Prim(block-set,List(Ref(str$187), Lit(8), Lit('0'))),Let(x$188,Unit,Prim(block-set,List(Ref(str$187), Lit(9), Lit('0'))),Ref(str$187)))))))))))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibStrings3(LibraryOKTests.scala:148)
	at miniscala.test.ok.LibraryOKTests.testLibStrings3$(LibraryOKTests.scala:147)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibStrings3(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists1" time="0.039">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(x$29,Unit,App(Ref(printChar),List(),List(If(Prim(==,List(Prim(block-tag,List(Prim(block-alloc-2,List(Lit(0))))), Lit(2))),Lit('O'),Lit('K')))),Let(x$30,Unit,App(Ref(printChar),List(),List(If(Let(sel_78,List[Int],Let(l_74,List[Int],Prim(block-alloc-3,List(Lit(2))),Let(x_75,Unit,Prim(block-set,List(Ref(l_74), Lit(0), Lit(42))),Let(x_76,Unit,Prim(block-set,List(Ref(l_74), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_74)))),If(Prim(block?,List(Ref(sel_78))),Let(tag_77,Int,Prim(block-tag,List(Ref(sel_78))),If(Prim(==,List(Ref(tag_77), Lit(2))),Lit(true),If(Prim(==,List(Ref(tag_77), Lit(3))),Lit(true),Lit(false)))),Lit(false))),Lit('K'),Lit('O')))),App(Ref(printChar),List(),List(If(Let(sel_80,Int,Lit(42),If(Prim(block?,List(Ref(sel_80))),Let(tag_79,Int,Prim(block-tag,List(Ref(sel_80))),If(Prim(==,List(Ref(tag_79), Lit(2))),Lit(true),If(Prim(==,List(Ref(tag_79), Lit(3))),Lit(true),Lit(false)))),Lit(false))),Lit('*'),Lit('
')))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(x$29,Unit,App(Ref(printChar),List(),List(If(Prim(==,List(Prim(block-tag,List(Prim(block-alloc-2,List(Lit(0))))), Lit(2))),Lit('O'),Lit('K')))),Let(x$30,Unit,App(Ref(printChar),List(),List(If(Let(sel_78,List[Int],Let(l_74,List[Int],Prim(block-alloc-3,List(Lit(2))),Let(x_75,Unit,Prim(block-set,List(Ref(l_74), Lit(0), Lit(42))),Let(x_76,Unit,Prim(block-set,List(Ref(l_74), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_74)))),If(Prim(block?,List(Ref(sel_78))),Let(tag_77,Int,Prim(block-tag,List(Ref(sel_78))),If(Prim(==,List(Ref(tag_77), Lit(2))),Lit(true),If(Prim(==,List(Ref(tag_77), Lit(3))),Lit(true),Lit(false)))),Lit(false))),Lit('K'),Lit('O')))),App(Ref(printChar),List(),List(If(Let(sel_80,Int,Lit(42),If(Prim(block?,List(Ref(sel_80))),Let(tag_79,Int,Prim(block-tag,List(Ref(sel_80))),If(Prim(==,List(Ref(tag_79), Lit(2))),Lit(true),If(Prim(==,List(Ref(tag_79), Lit(3))),Lit(true),Lit(false)))),Lit(false))),Lit('*'),Lit('
')))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists1(LibraryOKTests.scala:31)
	at miniscala.test.ok.LibraryOKTests.testLibLists1$(LibraryOKTests.scala:30)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists1(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists2" time="0.031">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],Let(l_80,List[Char],Prim(block-alloc-3,List(Lit(2))),Let(x_81,Unit,Prim(block-set,List(Ref(l_80), Lit(0), Lit('O'))),Let(x_82,Unit,Prim(block-set,List(Ref(l_80), Lit(1), Let(l_77,List[Char],Prim(block-alloc-3,List(Lit(2))),Let(x_78,Unit,Prim(block-set,List(Ref(l_77), Lit(0), Lit('K'))),Let(x_79,Unit,Prim(block-set,List(Ref(l_77), Lit(1), Let(l_74,List[Char],Prim(block-alloc-3,List(Lit(2))),Let(x_75,Unit,Prim(block-set,List(Ref(l_74), Lit(0), Lit('
'))),Let(x_76,Unit,Prim(block-set,List(Ref(l_74), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_74)))))),Ref(l_77)))))),Ref(l_80)))),Let(x$29,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Let(x$30,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Prim(block-get,List(Ref(l), Lit(1))), Lit(0))))),App(Ref(printChar),List(),List(Prim(block-get,List(Prim(block-get,List(Prim(block-get,List(Ref(l), Lit(1))), Lit(1))), Lit(0)))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],Let(l_80,List[Char],Prim(block-alloc-3,List(Lit(2))),Let(x_81,Unit,Prim(block-set,List(Ref(l_80), Lit(0), Lit('O'))),Let(x_82,Unit,Prim(block-set,List(Ref(l_80), Lit(1), Let(l_77,List[Char],Prim(block-alloc-3,List(Lit(2))),Let(x_78,Unit,Prim(block-set,List(Ref(l_77), Lit(0), Lit('K'))),Let(x_79,Unit,Prim(block-set,List(Ref(l_77), Lit(1), Let(l_74,List[Char],Prim(block-alloc-3,List(Lit(2))),Let(x_75,Unit,Prim(block-set,List(Ref(l_74), Lit(0), Lit('
'))),Let(x_76,Unit,Prim(block-set,List(Ref(l_74), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_74)))))),Ref(l_77)))))),Ref(l_80)))),Let(x$29,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Let(x$30,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Prim(block-get,List(Ref(l), Lit(1))), Lit(0))))),App(Ref(printChar),List(),List(Prim(block-get,List(Prim(block-get,List(Prim(block-get,List(Ref(l), Lit(1))), Lit(1))), Lit(0)))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists2(LibraryOKTests.scala:38)
	at miniscala.test.ok.LibraryOKTests.testLibLists2$(LibraryOKTests.scala:37)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists2(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists3" time="0.037">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake3),List(Char),List(Lit('O'), Lit('K'), Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), Ref(l)))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake3),List(Char),List(Lit('O'), Lit('K'), Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), Ref(l)))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists3(LibraryOKTests.scala:46)
	at miniscala.test.ok.LibraryOKTests.testLibLists3$(LibraryOKTests.scala:45)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists3(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists4" time="0.035">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l,List[Int],App(Ref(listMake3),List(Int),List(Lit(78), Lit(74), Lit(9))),App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), App(Ref(listMap),List(Int, Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos)),Int,Prim(+,List(Ref(x), Lit(1))))),Ref(fun$30)), Ref(l))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l,List[Int],App(Ref(listMake3),List(Int),List(Lit(78), Lit(74), Lit(9))),App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), App(Ref(listMap),List(Int, Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos)),Int,Prim(+,List(Ref(x), Lit(1))))),Ref(fun$30)), Ref(l))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists4(LibraryOKTests.scala:52)
	at miniscala.test.ok.LibraryOKTests.testLibLists4$(LibraryOKTests.scala:51)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists4(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists5" time="0.035">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(o,List[Int],App(Ref(listMake1),List(Int),List(Lit(79))),Let(k,List[Int],App(Ref(listMake3),List(Int),List(Lit(3), Lit(5), Lit(5))),Let(nl,List[Int],App(Ref(listMake2),List(Int),List(Lit(2), Lit(5))),LetRec(List(FunDef(prod,List(),List(Arg(l,List[Int],pos)),Int,App(Ref(listFoldLeft),List(Int, Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(*,List(Ref(x), Ref(y))))),Ref(fun$30)), Lit(1), Ref(l))))),Let(x$31,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(o))))),Let(x$32,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(k))))),App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(nl)))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(o,List[Int],App(Ref(listMake1),List(Int),List(Lit(79))),Let(k,List[Int],App(Ref(listMake3),List(Int),List(Lit(3), Lit(5), Lit(5))),Let(nl,List[Int],App(Ref(listMake2),List(Int),List(Lit(2), Lit(5))),LetRec(List(FunDef(prod,List(),List(Arg(l,List[Int],pos)),Int,App(Ref(listFoldLeft),List(Int, Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(*,List(Ref(x), Ref(y))))),Ref(fun$30)), Lit(1), Ref(l))))),Let(x$31,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(o))))),Let(x$32,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(k))))),App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(nl)))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists5(LibraryOKTests.scala:59)
	at miniscala.test.ok.LibraryOKTests.testLibLists5$(LibraryOKTests.scala:58)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists5(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists6" time="0.023">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(o,List[Int],App(Ref(listMake1),List(Int),List(Lit(79))),Let(k,List[Int],App(Ref(listMake3),List(Int),List(Lit(3), Lit(5), Lit(5))),Let(nl,List[Int],App(Ref(listMake2),List(Int),List(Lit(2), Lit(5))),LetRec(List(FunDef(prod,List(),List(Arg(l,List[Int],pos)),Int,App(Ref(listFoldRight),List(Int, Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(*,List(Ref(x), Ref(y))))),Ref(fun$30)), Lit(1), Ref(l))))),Let(x$31,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(o))))),Let(x$32,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(k))))),App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(nl)))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(o,List[Int],App(Ref(listMake1),List(Int),List(Lit(79))),Let(k,List[Int],App(Ref(listMake3),List(Int),List(Lit(3), Lit(5), Lit(5))),Let(nl,List[Int],App(Ref(listMake2),List(Int),List(Lit(2), Lit(5))),LetRec(List(FunDef(prod,List(),List(Arg(l,List[Int],pos)),Int,App(Ref(listFoldRight),List(Int, Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(*,List(Ref(x), Ref(y))))),Ref(fun$30)), Lit(1), Ref(l))))),Let(x$31,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(o))))),Let(x$32,Unit,App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(k))))),App(Ref(intPrintAsChar),List(),List(App(Ref(prod),List(),List(Ref(nl)))))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists6(LibraryOKTests.scala:71)
	at miniscala.test.ok.LibraryOKTests.testLibLists6$(LibraryOKTests.scala:70)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists6(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists7" time="0.029">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l,List[Int],App(Ref(listMake8),List(Int),List(Lit(1), Lit(79), Lit(2), Lit(3), Lit(1), Lit(75), Lit(10), Lit(2))),App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), App(Ref(listFilter),List(Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos)),Boolean,Prim(&gt;=,List(Ref(x), Lit(10))))),Ref(fun$30)), Ref(l))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l,List[Int],App(Ref(listMake8),List(Int),List(Lit(1), Lit(79), Lit(2), Lit(3), Lit(1), Lit(75), Lit(10), Lit(2))),App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), App(Ref(listFilter),List(Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(x,Int,pos)),Boolean,Prim(&gt;=,List(Ref(x), Lit(10))))),Ref(fun$30)), Ref(l))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists7(LibraryOKTests.scala:83)
	at miniscala.test.ok.LibraryOKTests.testLibLists7$(LibraryOKTests.scala:82)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists7(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists8" time="0.028">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l,List[Int],App(Ref(listMake3),List(Int),List(Lit(75), Lit(10), Lit(79))),Let(yn,(List[Int], List[Int]),App(Ref(listPartition),List(Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(c,Int,pos)),Boolean,Prim(&lt;,List(Ref(c), Lit(79))))),Ref(fun$30)), Ref(l))),Let(x$31,Unit,App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), Prim(block-get,List(Ref(yn), Lit(1))))),App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), Prim(block-get,List(Ref(yn), Lit(0))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(intPrintAsChar,Int =&gt; Unit,App(Ref(functionCompose),List(Int, Char, Unit),List(Ref(printChar), LetRec(List(FunDef(fun$29,List(),List(Arg(x,Int,pos)),Char,Prim(int-&gt;char,List(Ref(x))))),Ref(fun$29)))),Let(l,List[Int],App(Ref(listMake3),List(Int),List(Lit(75), Lit(10), Lit(79))),Let(yn,(List[Int], List[Int]),App(Ref(listPartition),List(Int),List(LetRec(List(FunDef(fun$30,List(),List(Arg(c,Int,pos)),Boolean,Prim(&lt;,List(Ref(c), Lit(79))))),Ref(fun$30)), Ref(l))),Let(x$31,Unit,App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), Prim(block-get,List(Ref(yn), Lit(1))))),App(Ref(listForeach),List(Int),List(Ref(intPrintAsChar), Prim(block-get,List(Ref(yn), Lit(0))))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists8(LibraryOKTests.scala:90)
	at miniscala.test.ok.LibraryOKTests.testLibLists8$(LibraryOKTests.scala:89)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists8(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLibLists9" time="0.019">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake6),List(Char),List(Lit('O'), Lit('K'), Lit('
'), Lit('K'), Lit('O'), Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listTake),List(Char),List(Ref(l), Lit(3)))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v))))))),Let(l,List[Char],App(Ref(listMake6),List(Char),List(Lit('O'), Lit('K'), Lit('
'), Lit('K'), Lit('O'), Lit('
'))),App(Ref(listForeach),List(Char),List(Ref(printChar), App(Ref(listTake),List(Char),List(Ref(l), Lit(3)))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.testLibLists9(LibraryOKTests.scala:99)
	at miniscala.test.ok.LibraryOKTests.testLibLists9$(LibraryOKTests.scala:98)
	at miniscala.test.CMScalaToCPS_Blackbox.testLibLists9(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic1" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(+,List(Lit(1), Lit(78))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(+,List(Lit(1), Lit(78))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic1(PrimitivesOKTests.scala:8)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic1$(PrimitivesOKTests.scala:7)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic1(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic2" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(-,List(Lit(80), Lit(1))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(-,List(Lit(80), Lit(1))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic2(PrimitivesOKTests.scala:15)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic2$(PrimitivesOKTests.scala:14)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic2(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic3" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(+,List(Prim(*,List(Prim(*,List(Lit(2), Lit(3))), Lit(13))), Lit(1))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(+,List(Prim(*,List(Prim(*,List(Lit(2), Lit(3))), Lit(13))), Lit(1))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic3(PrimitivesOKTests.scala:22)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic3$(PrimitivesOKTests.scala:21)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic3(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic4" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(/,List(Lit(158), Lit(2))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(/,List(Lit(158), Lit(2))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic4(PrimitivesOKTests.scala:29)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic4$(PrimitivesOKTests.scala:28)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic4(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic5" time="0.0">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(%,List(Lit(159), Lit(80))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(%,List(Lit(159), Lit(80))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic5(PrimitivesOKTests.scala:36)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic5$(PrimitivesOKTests.scala:35)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic5(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic6" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(-,List(Prim(&lt;&lt;,List(Lit(5), Lit(4))), Lit(1))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(-,List(Prim(&lt;&lt;,List(Lit(5), Lit(4))), Lit(1))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic6(PrimitivesOKTests.scala:43)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic6$(PrimitivesOKTests.scala:42)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic6(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic7" time="0.0">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(&gt;&gt;,List(Lit(1264), Lit(4))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(&gt;&gt;,List(Lit(1264), Lit(4))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic7(PrimitivesOKTests.scala:50)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic7$(PrimitivesOKTests.scala:49)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic7(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic8" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(&amp;,List(Lit(65535), Lit(79))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(&amp;,List(Lit(65535), Lit(79))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic8(PrimitivesOKTests.scala:57)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic8$(PrimitivesOKTests.scala:56)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic8(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic9" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(|,List(Lit(0), Lit(79))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(|,List(Lit(0), Lit(79))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic9(PrimitivesOKTests.scala:64)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic9$(PrimitivesOKTests.scala:63)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic9(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveArithmetic10" time="0.001">
                                                 <failure message="scala.MatchError: Prim(byte-write,List(Prim(^,List(Lit(127), Lit(48))))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(byte-write,List(Prim(^,List(Lit(127), Lit(48))))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic10(PrimitivesOKTests.scala:71)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveArithmetic10$(PrimitivesOKTests.scala:70)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveArithmetic10(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveBlocks1" time="0.001">
                                                 <failure message="scala.MatchError: Prim(int-&gt;char,List(Lit(10))) (of class miniscala.CMScalaTreeModule$Prim)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: Prim(int-&gt;char,List(Lit(10))) (of class miniscala.CMScalaTreeModule$Prim)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks1(PrimitivesOKTests.scala:78)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks1$(PrimitivesOKTests.scala:77)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveBlocks1(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveBlocks2" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('O'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('K'))),Ref(str$1)))),Let(x$4,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(0))))))),Let(x$5,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(1))))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('O'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('K'))),Ref(str$1)))),Let(x$4,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(0))))))),Let(x$5,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(1))))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks2(PrimitivesOKTests.scala:88)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks2$(PrimitivesOKTests.scala:87)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveBlocks2(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveBlocks3" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('K'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('O'))),Ref(str$1)))),Let(x$4,Unit,Prim(block-set,List(Ref(v), Lit(0), Lit('O'))),Let(x$5,Unit,Prim(block-set,List(Ref(v), Lit(1), Lit('K'))),Let(x$6,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(0))))))),Let(x$7,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(1))))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('K'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('O'))),Ref(str$1)))),Let(x$4,Unit,Prim(block-set,List(Ref(v), Lit(0), Lit('O'))),Let(x$5,Unit,Prim(block-set,List(Ref(v), Lit(1), Lit('K'))),Let(x$6,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(0))))))),Let(x$7,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(1))))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks3(PrimitivesOKTests.scala:97)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks3$(PrimitivesOKTests.scala:96)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveBlocks3(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveBlocks4" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('K'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('O'))),Ref(str$1)))),Let(x$4,Unit,Prim(byte-write,List(Prim(+,List(Prim(block-length,List(Ref(v))), Lit(77))))),Let(x$5,Unit,Prim(byte-write,List(Prim(+,List(Prim(block-length,List(Ref(v))), Lit(73))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('K'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('O'))),Ref(str$1)))),Let(x$4,Unit,Prim(byte-write,List(Prim(+,List(Prim(block-length,List(Ref(v))), Lit(77))))),Let(x$5,Unit,Prim(byte-write,List(Prim(+,List(Prim(block-length,List(Ref(v))), Lit(73))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks4(PrimitivesOKTests.scala:108)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks4$(PrimitivesOKTests.scala:107)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveBlocks4(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveBlocks5" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('q'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('q'))),Ref(str$1)))),Let(x$4,Unit,Prim(block-set,List(Ref(v), Lit(0), Lit('O'))),Let(x$5,Unit,Prim(block-set,List(Ref(v), Lit(1), Lit('K'))),Let(x$6,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(0))))))),Let(x$7,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(1))))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(2))),Let(x$3,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('q'))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(1), Lit('q'))),Ref(str$1)))),Let(x$4,Unit,Prim(block-set,List(Ref(v), Lit(0), Lit('O'))),Let(x$5,Unit,Prim(block-set,List(Ref(v), Lit(1), Lit('K'))),Let(x$6,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(0))))))),Let(x$7,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Prim(block-get,List(Ref(v), Lit(1))))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List()))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks5(PrimitivesOKTests.scala:117)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks5$(PrimitivesOKTests.scala:116)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveBlocks5(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveBlocks7" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(1))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('q'))),Ref(str$1))),Let(u,Array[Char],Let(str$3,Array[Char],Prim(block-alloc-1,List(Lit(1))),Let(x$4,Unit,Prim(block-set,List(Ref(str$3), Lit(0), Lit('q'))),Ref(str$3))),Let(x$5,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(==,List(Ref(v), Ref(u))),Lit('K'),Lit('O')))))),Let(x$6,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(!=,List(Ref(v), Ref(u))),Lit('K'),Lit('O')))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List())))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Char,Prim(int-&gt;char,List(Lit(10))))),Let(v,Array[Char],Let(str$1,Array[Char],Prim(block-alloc-1,List(Lit(1))),Let(x$2,Unit,Prim(block-set,List(Ref(str$1), Lit(0), Lit('q'))),Ref(str$1))),Let(u,Array[Char],Let(str$3,Array[Char],Prim(block-alloc-1,List(Lit(1))),Let(x$4,Unit,Prim(block-set,List(Ref(str$3), Lit(0), Lit('q'))),Ref(str$3))),Let(x$5,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(==,List(Ref(v), Ref(u))),Lit('K'),Lit('O')))))),Let(x$6,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(!=,List(Ref(v), Ref(u))),Lit('K'),Lit('O')))))),Prim(byte-write,List(Prim(char-&gt;int,List(App(Ref(nl),List(),List())))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks7(PrimitivesOKTests.scala:136)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveBlocks7$(PrimitivesOKTests.scala:135)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveBlocks7(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic10" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;,List(Lit(2), Lit(1))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;,List(Lit(1), Lit(1))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;,List(Lit(2), Lit(1))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(&gt;,List(Lit(1), Lit(1))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic10(PrimitivesOKTests.scala:218)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic10$(PrimitivesOKTests.scala:217)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic10(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic11" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;,List(Lit(2), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;,List(Lit(2), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(&gt;,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic11(PrimitivesOKTests.scala:226)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic11$(PrimitivesOKTests.scala:225)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic11(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic12" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(==,List(Lit(1), Lit(1))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(==,List(Lit(2), Lit(1))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(==,List(Lit(1), Lit(1))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(==,List(Lit(2), Lit(1))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic12(PrimitivesOKTests.scala:234)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic12$(PrimitivesOKTests.scala:233)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic12(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic13" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(==,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(==,List(Lit(1), Lit(2))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(==,List(Lit(1), Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(==,List(Lit(1), Lit(2))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic13(PrimitivesOKTests.scala:242)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic13$(PrimitivesOKTests.scala:241)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic13(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic14" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(!=,List(Lit(true), Lit(false))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(!=,List(Lit(false), Lit(false))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(!=,List(Lit(true), Lit(false))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(!=,List(Lit(false), Lit(false))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic14(PrimitivesOKTests.scala:250)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic14$(PrimitivesOKTests.scala:249)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic14(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic15" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Lit(true))),Lit('O'),Lit('K')))))),Let(x$7,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Let(str$2,Array[Char],Prim(block-alloc-1,List(Lit(4))),Let(x$6,Unit,Prim(block-set,List(Ref(str$2), Lit(0), Lit('t'))),Let(x$5,Unit,Prim(block-set,List(Ref(str$2), Lit(1), Lit('r'))),Let(x$4,Unit,Prim(block-set,List(Ref(str$2), Lit(2), Lit('u'))),Let(x$3,Unit,Prim(block-set,List(Ref(str$2), Lit(3), Lit('e'))),Ref(str$2)))))))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Lit(true))),Lit('O'),Lit('K')))))),Let(x$7,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(bool?,List(Let(str$2,Array[Char],Prim(block-alloc-1,List(Lit(4))),Let(x$6,Unit,Prim(block-set,List(Ref(str$2), Lit(0), Lit('t'))),Let(x$5,Unit,Prim(block-set,List(Ref(str$2), Lit(1), Lit('r'))),Let(x$4,Unit,Prim(block-set,List(Ref(str$2), Lit(2), Lit('u'))),Let(x$3,Unit,Prim(block-set,List(Ref(str$2), Lit(3), Lit('e'))),Ref(str$2)))))))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic15(PrimitivesOKTests.scala:259)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic15$(PrimitivesOKTests.scala:258)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic15(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic16" time="0.003">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(unit?,List(Lit(()))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(unit?,List(Lit(true))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(unit?,List(Lit(()))),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(Prim(unit?,List(Lit(true))),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic16(PrimitivesOKTests.scala:267)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic16$(PrimitivesOKTests.scala:266)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic16(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic17" time="0.002">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(If(Lit(false),Lit(false),Lit(true)),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(If(Lit(true),Lit(false),Lit(true)),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(If(Lit(false),Lit(false),Lit(true)),Lit('O'),Lit('K')))))),Let(x$2,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(If(If(Lit(true),Lit(false),Lit(true)),Lit('O'),Lit('K')))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic17(PrimitivesOKTests.scala:275)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic17$(PrimitivesOKTests.scala:274)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic17(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic18" time="0.002">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Lit(true))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$8,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Let(str$2,Array[Char],Prim(block-alloc-1,List(Lit(5))),Let(x$7,Unit,Prim(block-set,List(Ref(str$2), Lit(0), Lit('f'))),Let(x$6,Unit,Prim(block-set,List(Ref(str$2), Lit(1), Lit('a'))),Let(x$5,Unit,Prim(block-set,List(Ref(str$2), Lit(2), Lit('l'))),Let(x$4,Unit,Prim(block-set,List(Ref(str$2), Lit(3), Lit('s'))),Let(x$3,Unit,Prim(block-set,List(Ref(str$2), Lit(4), Lit('e'))),Ref(str$2))))))))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Lit(true))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$8,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Let(str$2,Array[Char],Prim(block-alloc-1,List(Lit(5))),Let(x$7,Unit,Prim(block-set,List(Ref(str$2), Lit(0), Lit('f'))),Let(x$6,Unit,Prim(block-set,List(Ref(str$2), Lit(1), Lit('a'))),Let(x$5,Unit,Prim(block-set,List(Ref(str$2), Lit(2), Lit('l'))),Let(x$4,Unit,Prim(block-set,List(Ref(str$2), Lit(3), Lit('s'))),Let(x$3,Unit,Prim(block-set,List(Ref(str$2), Lit(4), Lit('e'))),Ref(str$2))))))))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic18(PrimitivesOKTests.scala:283)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic18$(PrimitivesOKTests.scala:282)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic18(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic19" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Lit(()))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Lit(1))),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(bool?,List(Lit(()))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic19(PrimitivesOKTests.scala:291)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic19$(PrimitivesOKTests.scala:290)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic19(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLogic22" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,If(Lit(true),Lit(false),Lit(true)),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,If(Lit(false),Lit(false),Lit(true)),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,If(Lit(true),Lit(false),Lit(true)),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,If(Lit(false),Lit(false),Lit(true)),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic22(PrimitivesOKTests.scala:315)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLogic22$(PrimitivesOKTests.scala:314)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLogic22(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLog20" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(unit?,List(Lit(3))),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(unit?,List(Lit(()))),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(unit?,List(Lit(3))),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(unit?,List(Lit(()))),Prim(char-&gt;int,List(If(Ref(v),Lit('K'),Lit('O'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLog20(PrimitivesOKTests.scala:299)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLog20$(PrimitivesOKTests.scala:298)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLog20(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testPrimitiveLog21" time="0.001">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(char?,List(Lit('3'))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(char?,List(Lit(65))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(nl,List(),List(),Unit,Prim(byte-write,List(Lit(10))))),Let(x$1,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(char?,List(Lit('3'))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),Let(x$2,Unit,Prim(byte-write,List(Let(v,Boolean,Prim(char?,List(Lit(65))),Prim(char-&gt;int,List(If(Ref(v),Lit('O'),Lit('K'))))))),App(Ref(nl),List(),List())))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLog21(PrimitivesOKTests.scala:307)
	at miniscala.test.ok.PrimitivesOKTests.testPrimitiveLog21$(PrimitivesOKTests.scala:306)
	at miniscala.test.CMScalaToCPS_Blackbox.testPrimitiveLog21(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testLetrec" time="0.027">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v)))))), FunDef(f,List(),List(Arg(x,Int,pos)),Int,If(Prim(&gt;,List(Ref(x), Lit(0))),App(Ref(g),List(),List(Ref(x))),Ref(x))), FunDef(g,List(),List(Arg(x,Int,pos)),Int,App(Ref(f),List(),List(Prim(-,List(Ref(x), Lit(1))))))),Let(x$29,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),If(Prim(==,List(App(Ref(f),List(),List(Lit(5))), Lit(0))),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v)))))), FunDef(f,List(),List(Arg(x,Int,pos)),Int,If(Prim(&gt;,List(Ref(x), Lit(0))),App(Ref(g),List(),List(Ref(x))),Ref(x))), FunDef(g,List(),List(Arg(x,Int,pos)),Int,App(Ref(f),List(),List(Prim(-,List(Ref(x), Lit(1))))))),Let(x$29,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),If(Prim(==,List(App(Ref(f),List(),List(Lit(5))), Lit(0))),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))),Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.ConstructsOKTests.testLetrec(ConstructsOKTests.scala:20)
	at miniscala.test.ok.ConstructsOKTests.testLetrec$(ConstructsOKTests.scala:19)
	at miniscala.test.CMScalaToCPS_Blackbox.testLetrec(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase><testcase classname="miniscala.test.CMScalaToCPS_Blackbox" name="testAppOrder" time="0.023">
                                                 <failure message="scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v)))))), FunDef(intFunGen,List(),List(),Int =&gt; Int,Let(x$29,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),LetRec(List(FunDef(fun$30,List(),List(Arg(i,Int,pos)),Int,Prim(+,List(Ref(i), Lit(1))))),Ref(fun$30)))), FunDef(intGen,List(),List(),Int,Let(x$31,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))),Lit(0)))),App(App(Ref(intFunGen),List(),List()),List(),List(App(Ref(intGen),List(),List()))))))) (of class miniscala.CMScalaTreeModule$LetRec)" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: scala.MatchError: LetRec(List(FunDef(printChar,List(),List(Arg(c,Char,pos)),Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Ref(c)))))), FunDef(charRead,List(),List(),Char,Prim(int-&gt;char,List(Prim(byte-read,List())))), FunDef(println,List(),List(),Unit,App(Ref(printChar),List(),List(Lit('
'))))),Let(int0,Int,Prim(char-&gt;int,List(Lit('0'))),Let(int9,Int,Prim(char-&gt;int,List(Lit('9'))),LetRec(List(FunDef(isCharDigit,List(),List(Arg(c,Char,pos)),Boolean,Let(intC,Int,Prim(char-&gt;int,List(Ref(c))),If(Prim(&lt;=,List(Ref(int0), Ref(intC))),Prim(&lt;=,List(Ref(intC), Ref(int9))),Lit(false)))), FunDef(charDigitToInt,List(),List(Arg(c,Char,pos)),Int,Prim(-,List(Prim(char-&gt;int,List(Ref(c))), Ref(int0)))), FunDef(intCharDigit,List(),List(Arg(i,Int,pos)),Char,Prim(int-&gt;char,List(Prim(+,List(Ref(i), Ref(int0)))))), FunDef(functionCompose,List(T, U, V),List(Arg(f,U =&gt; V,pos), Arg(g,T =&gt; U,pos)),T =&gt; V,LetRec(List(FunDef(fun$1,List(),List(Arg(x,T,pos)),V,App(Ref(f),List(),List(App(Ref(g),List(),List(Ref(x))))))),Ref(fun$1))), FunDef(isEven,List(),List(Arg(i,Int,pos)),Boolean,Prim(==,List(Lit(0), Prim(&amp;,List(Lit(1), Ref(i)))))), FunDef(isOdd,List(),List(Arg(i,Int,pos)),Boolean,If(App(Ref(isEven),List(),List(Ref(i))),Lit(false),Lit(true))), FunDef(intAbs,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Ref(i))),Ref(i))), FunDef(intSignum,List(),List(Arg(i,Int,pos)),Int,If(Prim(&lt;,List(Ref(i), Lit(0))),Prim(-,List(Lit(1))),If(Prim(==,List(Ref(i), Lit(0))),Lit(0),Lit(1)))), FunDef(intGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,LetRec(List(FunDef(auxGcd,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Lit(0), Ref(y))),Ref(x),App(Ref(auxGcd),List(),List(Ref(y), Prim(%,List(Ref(x), Ref(y)))))))),App(Ref(auxGcd),List(),List(App(Ref(intAbs),List(),List(Ref(x))), App(Ref(intAbs),List(),List(Ref(y))))))), FunDef(intPow,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,If(Prim(==,List(Ref(y), Lit(0))),Lit(1),If(App(Ref(isEven),List(),List(Ref(y))),Let(t,Int,App(Ref(intPow),List(),List(Ref(x), Prim(/,List(Ref(y), Lit(2))))),Prim(*,List(Ref(t), Ref(t)))),Prim(*,List(Ref(x), App(Ref(intPow),List(),List(Ref(x), Prim(-,List(Ref(y), Lit(1)))))))))), FunDef(intRead,List(),List(),Int,LetRec(List(FunDef(aux,List(),List(Arg(accf,(Int,Int) =&gt; Int,pos), Arg(acc,Int,pos)),Int,Let(c,Char,App(Ref(charRead),List(),List()),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(Ref(accf), App(Ref(accf),List(),List(Prim(*,List(Lit(10), Ref(acc))), App(Ref(charDigitToInt),List(),List(Ref(c))))))),Ref(acc))))),Let(c,Char,App(Ref(charRead),List(),List()),If(Prim(==,List(Ref(c), Lit('-'))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$2,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(-,List(Ref(x), Ref(y))))),Ref(fun$2)), Lit(0))),If(App(Ref(isCharDigit),List(),List(Ref(c))),App(Ref(aux),List(),List(LetRec(List(FunDef(fun$3,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(+,List(Ref(x), Ref(y))))),Ref(fun$3)), App(Ref(charDigitToInt),List(),List(Ref(c))))),Lit(0)))))), FunDef(printInt,List(),List(Arg(i,Int,pos)),Unit,Let(x$4,Unit,If(Prim(&lt;,List(Ref(i), Lit(0))),App(Ref(printChar),List(),List(Lit('-'))),Lit(())),LetRec(List(FunDef(aux,List(),List(Arg(i,Int,pos)),Unit,Let(x$5,Unit,If(Prim(&lt;=,List(Ref(i), Prim(-,List(Lit(10))))),App(Ref(aux),List(),List(Prim(/,List(Prim(+,List(Ref(i), Lit(9))), Lit(10))))),Lit(())),App(Ref(printChar),List(),List(App(Ref(intCharDigit),List(),List(Prim(%,List(Prim(-,List(Ref(i))), Lit(10)))))))))),App(Ref(aux),List(),List(If(Prim(&lt;,List(Ref(i), Lit(0))),Ref(i),Prim(-,List(Ref(i))))))))), FunDef(pairDeriveEq,List(T, U),List(Arg(eq1,(T,T) =&gt; Boolean,pos), Arg(eq2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$6,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(eq1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),App(Ref(eq2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false)))),Ref(fun$6))), FunDef(pairDeriveLt,List(T, U),List(Arg(lt1,(T,T) =&gt; Boolean,pos), Arg(lt2,(U,U) =&gt; Boolean,pos)),((T, U),(T, U)) =&gt; Boolean,LetRec(List(FunDef(fun$7,List(),List(Arg(p1,(T, U),pos), Arg(p2,(T, U),pos)),Boolean,If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(true),If(If(App(Ref(lt1),List(),List(Prim(block-get,List(Ref(p1), Lit(0))), Prim(block-get,List(Ref(p2), Lit(0))))),Lit(false),Lit(true)),App(Ref(lt2),List(),List(Prim(block-get,List(Ref(p1), Lit(1))), Prim(block-get,List(Ref(p2), Lit(1))))),Lit(false))))),Ref(fun$7))), FunDef(listMake1,List(T),List(Arg(e1,T,pos)),List[T],Let(l_1,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_2,Unit,Prim(block-set,List(Ref(l_1), Lit(0), Ref(e1))),Let(x_3,Unit,Prim(block-set,List(Ref(l_1), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(l_1))))), FunDef(listMake2,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos)),List[T],Let(l_4,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_5,Unit,Prim(block-set,List(Ref(l_4), Lit(0), Ref(e1))),Let(x_6,Unit,Prim(block-set,List(Ref(l_4), Lit(1), App(Ref(listMake1),List(T),List(Ref(e2))))),Ref(l_4))))), FunDef(listMake3,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos)),List[T],Let(l_7,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_8,Unit,Prim(block-set,List(Ref(l_7), Lit(0), Ref(e1))),Let(x_9,Unit,Prim(block-set,List(Ref(l_7), Lit(1), App(Ref(listMake2),List(T),List(Ref(e2), Ref(e3))))),Ref(l_7))))), FunDef(listMake4,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos)),List[T],Let(l_10,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_11,Unit,Prim(block-set,List(Ref(l_10), Lit(0), Ref(e1))),Let(x_12,Unit,Prim(block-set,List(Ref(l_10), Lit(1), App(Ref(listMake3),List(T),List(Ref(e2), Ref(e3), Ref(e4))))),Ref(l_10))))), FunDef(listMake5,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos)),List[T],Let(l_13,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_14,Unit,Prim(block-set,List(Ref(l_13), Lit(0), Ref(e1))),Let(x_15,Unit,Prim(block-set,List(Ref(l_13), Lit(1), App(Ref(listMake4),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5))))),Ref(l_13))))), FunDef(listMake6,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos)),List[T],Let(l_16,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_17,Unit,Prim(block-set,List(Ref(l_16), Lit(0), Ref(e1))),Let(x_18,Unit,Prim(block-set,List(Ref(l_16), Lit(1), App(Ref(listMake5),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6))))),Ref(l_16))))), FunDef(listMake7,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos)),List[T],Let(l_19,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_20,Unit,Prim(block-set,List(Ref(l_19), Lit(0), Ref(e1))),Let(x_21,Unit,Prim(block-set,List(Ref(l_19), Lit(1), App(Ref(listMake6),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7))))),Ref(l_19))))), FunDef(listMake8,List(T),List(Arg(e1,T,pos), Arg(e2,T,pos), Arg(e3,T,pos), Arg(e4,T,pos), Arg(e5,T,pos), Arg(e6,T,pos), Arg(e7,T,pos), Arg(e8,T,pos)),List[T],Let(l_22,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_23,Unit,Prim(block-set,List(Ref(l_22), Lit(0), Ref(e1))),Let(x_24,Unit,Prim(block-set,List(Ref(l_22), Lit(1), App(Ref(listMake7),List(T),List(Ref(e2), Ref(e3), Ref(e4), Ref(e5), Ref(e6), Ref(e7), Ref(e8))))),Ref(l_22))))), FunDef(listTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),List[T],If(Prim(==,List(Ref(n), Lit(0))),Prim(block-alloc-2,List(Lit(0))),Let(l_25,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_26,Unit,Prim(block-set,List(Ref(l_25), Lit(0), App(Ref(f),List(),List(Prim(-,List(Ref(n), Lit(1))))))),Let(x_27,Unit,Prim(block-set,List(Ref(l_25), Lit(1), App(Ref(listTabulate),List(T),List(Prim(-,List(Ref(n), Lit(1))), Ref(f))))),Ref(l_25)))))), FunDef(listLength,List(T),List(Arg(l,List[T],pos)),Int,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(0),Prim(+,List(Lit(1), App(Ref(listLength),List(T),List(Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(l,List[T],pos)),Unit,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),Let(x$8,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listForeach),List(T),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(()))), FunDef(listMap,List(T, U),List(Arg(f,T =&gt; U,pos), Arg(l,List[T],pos)),List[U],If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Prim(block-alloc-2,List(Lit(0))),Let(l_28,List[U],Prim(block-alloc-3,List(Lit(2))),Let(x_29,Unit,Prim(block-set,List(Ref(l_28), Lit(0), App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))))))),Let(x_30,Unit,Prim(block-set,List(Ref(l_28), Lit(1), App(Ref(listMap),List(T, U),List(Ref(f), Prim(block-get,List(Ref(l), Lit(1))))))),Ref(l_28)))))), FunDef(listFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(listFoldLeft),List(T, U),List(Ref(f), App(Ref(f),List(),List(Ref(z), Prim(block-get,List(Ref(l), Lit(0))))), Prim(block-get,List(Ref(l), Lit(1))))))), FunDef(listFoldRight,List(T, U),List(Arg(f,(U,T) =&gt; T,pos), Arg(z,T,pos), Arg(l,List[U],pos)),T,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Ref(z),App(Ref(f),List(),List(Prim(block-get,List(Ref(l), Lit(0))), App(Ref(listFoldRight),List(T, U),List(Ref(f), Ref(z), Prim(block-get,List(Ref(l), Lit(1))))))))), FunDef(listEvery,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(true),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(listEvery),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1))))),Lit(false)))), FunDef(listAny,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),Boolean,If(If(Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2))),Lit(false),Lit(true)),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(l), Lit(0))))),Lit(true),App(Ref(listAny),List(T),List(Ref(p), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(false))), FunDef(listFilter,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),List[T],App(Ref(listFoldRight),List(List[T], T),List(LetRec(List(FunDef(fun$9,List(),List(Arg(e,T,pos), Arg(r,List[T],pos)),List[T],If(App(Ref(p),List(),List(Ref(e))),Let(l_31,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_32,Unit,Prim(block-set,List(Ref(l_31), Lit(0), Ref(e))),Let(x_33,Unit,Prim(block-set,List(Ref(l_31), Lit(1), Ref(r))),Ref(l_31)))),Ref(r)))),Ref(fun$9)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listPartition,List(T),List(Arg(p,T =&gt; Boolean,pos), Arg(l,List[T],pos)),(List[T], List[T]),App(Ref(listFoldRight),List((List[T], List[T]), T),List(LetRec(List(FunDef(fun$10,List(),List(Arg(e,T,pos), Arg(yn,(List[T], List[T]),pos)),(List[T], List[T]),If(App(Ref(p),List(),List(Ref(e))),Let(p_43,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_44,Unit,Prim(block-set,List(Ref(p_43), Lit(0), Let(l_40,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_41,Unit,Prim(block-set,List(Ref(l_40), Lit(0), Ref(e))),Let(x_42,Unit,Prim(block-set,List(Ref(l_40), Lit(1), Prim(block-get,List(Ref(yn), Lit(0))))),Ref(l_40)))))),Let(x_45,Unit,Prim(block-set,List(Ref(p_43), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(p_43)))),Let(p_37,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_38,Unit,Prim(block-set,List(Ref(p_37), Lit(0), Prim(block-get,List(Ref(yn), Lit(0))))),Let(x_39,Unit,Prim(block-set,List(Ref(p_37), Lit(1), Let(l_34,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_35,Unit,Prim(block-set,List(Ref(l_34), Lit(0), Ref(e))),Let(x_36,Unit,Prim(block-set,List(Ref(l_34), Lit(1), Prim(block-get,List(Ref(yn), Lit(1))))),Ref(l_34)))))),Ref(p_37))))))),Ref(fun$10)), Let(p_46,(List[T], List[T]),Prim(block-alloc-0,List(Lit(2))),Let(x_47,Unit,Prim(block-set,List(Ref(p_46), Lit(0), Prim(block-alloc-2,List(Lit(0))))),Let(x_48,Unit,Prim(block-set,List(Ref(p_46), Lit(1), Prim(block-alloc-2,List(Lit(0))))),Ref(p_46)))), Ref(l)))), FunDef(listTake,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_49,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_50,Unit,Prim(block-set,List(Ref(l_49), Lit(0), Prim(block-get,List(Ref(l), Lit(0))))),Let(x_51,Unit,Prim(block-set,List(Ref(l_49), Lit(1), App(Ref(listTake),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))),Ref(l_49)))))), FunDef(listDrop,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),List[T],If(If(Prim(==,List(Lit(0), Ref(n))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l))), Lit(2)))),Ref(l),App(Ref(listDrop),List(T),List(Prim(block-get,List(Ref(l), Lit(1))), Prim(-,List(Ref(n), Lit(1))))))), FunDef(listNth,List(T),List(Arg(l,List[T],pos), Arg(n,Int,pos)),T,Prim(block-get,List(App(Ref(listDrop),List(T),List(Ref(l), Ref(n))), Lit(0)))), FunDef(listReverse,List(T),List(Arg(l,List[T],pos)),List[T],App(Ref(listFoldLeft),List(List[T], T),List(LetRec(List(FunDef(fun$11,List(),List(Arg(t,List[T],pos), Arg(h,T,pos)),List[T],Let(l_52,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_53,Unit,Prim(block-set,List(Ref(l_52), Lit(0), Ref(h))),Let(x_54,Unit,Prim(block-set,List(Ref(l_52), Lit(1), Ref(t))),Ref(l_52)))))),Ref(fun$11)), Prim(block-alloc-2,List(Lit(0))), Ref(l)))), FunDef(listAppend,List(T),List(Arg(l1,List[T],pos), Arg(l2,List[T],pos)),List[T],If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Ref(l2),If(Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2))),Ref(l1),Let(l_55,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_56,Unit,Prim(block-set,List(Ref(l_55), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_57,Unit,Prim(block-set,List(Ref(l_55), Lit(1), App(Ref(listAppend),List(T),List(Prim(block-get,List(Ref(l1), Lit(1))), Ref(l2))))),Ref(l_55))))))), FunDef(listZip,List(T, U),List(Arg(l1,List[T],pos), Arg(l2,List[U],pos)),List[(T, U)],If(If(Prim(==,List(Prim(block-tag,List(Ref(l1))), Lit(2))),Lit(true),Prim(==,List(Prim(block-tag,List(Ref(l2))), Lit(2)))),Prim(block-alloc-2,List(Lit(0))),Let(l_61,List[(T, U)],Prim(block-alloc-3,List(Lit(2))),Let(x_62,Unit,Prim(block-set,List(Ref(l_61), Lit(0), Let(p_58,(T, U),Prim(block-alloc-0,List(Lit(2))),Let(x_59,Unit,Prim(block-set,List(Ref(p_58), Lit(0), Prim(block-get,List(Ref(l1), Lit(0))))),Let(x_60,Unit,Prim(block-set,List(Ref(p_58), Lit(1), Prim(block-get,List(Ref(l2), Lit(0))))),Ref(p_58)))))),Let(x_63,Unit,Prim(block-set,List(Ref(l_61), Lit(1), App(Ref(listZip),List(T, U),List(Prim(block-get,List(Ref(l1), Lit(1))), Prim(block-get,List(Ref(l2), Lit(1))))))),Ref(l_61)))))), FunDef(printString,List(),List(Arg(s,Array[Char],pos)),Unit,VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s))))),Let(x$12,Unit,App(Ref(printChar),List(),List(Prim(block-get,List(Ref(s), Ref(idx))))),Let(x_64,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Lit(())))), FunDef(stringConcat,List(),List(Arg(s1,Array[Char],pos), Arg(s2,Array[Char],pos)),Array[Char],Let(s3,Array[Char],Prim(block-alloc-1,List(Prim(+,List(Prim(block-length,List(Ref(s1))), Prim(block-length,List(Ref(s2))))))),VarDec(idx,Int,Lit(0),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s1))))),Let(x$13,Unit,Prim(block-set,List(Ref(s3), Ref(idx), Prim(block-get,List(Ref(s1), Ref(idx))))),Let(x_65,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Let(x$14,Int,VarAssign(idx,Lit(0)),While(Prim(&lt;,List(Ref(idx), Prim(block-length,List(Ref(s2))))),Let(x$15,Unit,Prim(block-set,List(Ref(s3), Prim(+,List(Prim(block-length,List(Ref(s1))), Ref(idx))), Prim(block-get,List(Ref(s2), Ref(idx))))),Let(x_66,Int,VarAssign(idx,Prim(+,List(Ref(idx), Lit(1)))),Lit(()))),Ref(s3))))))), FunDef(makeRNG,List(),List(Arg(seed,Int,pos)),Array[Int],Let(rng,Array[Int],Prim(block-alloc-1,List(Lit(1))),Let(x$16,Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(seed), Lit(65535))))),Ref(rng)))), FunDef(rngGetState,List(),List(Arg(rng,Array[Int],pos)),Int,Prim(block-get,List(Ref(rng), Lit(0)))), FunDef(rngSetState,List(),List(Arg(rng,Array[Int],pos), Arg(state,Int,pos)),Unit,Prim(block-set,List(Ref(rng), Lit(0), Prim(&amp;,List(Ref(state), Lit(65535)))))), FunDef(rngRotateRight8,List(),List(Arg(x,Int,pos), Arg(y,Int,pos)),Int,Prim(&amp;,List(Prim(|,List(Prim(&gt;&gt;,List(Ref(x), Ref(y))), Prim(&lt;&lt;,List(Ref(x), Prim(-,List(Lit(8), Ref(y))))))), Lit(255)))), FunDef(rngStep,List(),List(Arg(rng,Array[Int],pos)),Unit,App(Ref(rngSetState),List(),List(Ref(rng), Prim(+,List(Prim(*,List(App(Ref(rngGetState),List(),List(Ref(rng))), Lit(12829))), Lit(47989)))))), FunDef(rngOutput,List(),List(Arg(rng,Array[Int],pos)),Int,Let(state,Int,App(Ref(rngGetState),List(),List(Ref(rng))),App(Ref(rngRotateRight8),List(),List(Prim(&amp;,List(Lit(255), Prim(&gt;&gt;,List(Prim(^,List(Ref(state), Prim(&gt;&gt;,List(Ref(state), Lit(5))))), Lit(5))))), Prim(&gt;&gt;,List(Ref(state), Lit(13))))))), FunDef(rngNextInt8,List(),List(Arg(rng,Array[Int],pos)),Int,Let(i,Int,App(Ref(rngOutput),List(),List(Ref(rng))),Let(x$17,Unit,App(Ref(rngStep),List(),List(Ref(rng))),Ref(i)))), FunDef(rngNextInt,List(),List(Arg(rng,Array[Int],pos)),Int,Let(b0,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b1,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b2,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Let(b3,Int,App(Ref(rngNextInt8),List(),List(Ref(rng))),Prim(|,List(Prim(|,List(Prim(|,List(Prim(&lt;&lt;,List(Ref(b0), Lit(24))), Prim(&lt;&lt;,List(Ref(b1), Lit(16))))), Prim(&lt;&lt;,List(Ref(b2), Lit(8))))), Ref(b3)))))))), FunDef(arrayTabulate,List(T),List(Arg(n,Int,pos), Arg(f,Int =&gt; T,pos)),Array[T],Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$18,Unit,Prim(block-set,List(Ref(v), Ref(i), App(Ref(f),List(),List(Ref(i))))),Let(x_67,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(v))))), FunDef(arraySwap,List(T),List(Arg(v,Array[T],pos), Arg(i1,Int,pos), Arg(i2,Int,pos)),Unit,Let(t,T,Prim(block-get,List(Ref(v), Ref(i1))),Let(x$19,Unit,Prim(block-set,List(Ref(v), Ref(i1), Prim(block-get,List(Ref(v), Ref(i2))))),Prim(block-set,List(Ref(v), Ref(i2), Ref(t)))))), FunDef(arrayShuffle,List(T),List(Arg(v,Array[T],pos), Arg(seed,Int,pos)),Unit,Let(rng,Array[Int],App(Ref(makeRNG),List(),List(Ref(seed))),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(i,Int,Lit(0),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(j,Int,Prim(+,List(Ref(i), Prim(%,List(App(Ref(rngNextInt),List(),List(Ref(rng))), Prim(-,List(Ref(l), Ref(i))))))),Let(x$20,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(i), Ref(j))),Let(x_68,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(())))),Lit(())))))), FunDef(auxArrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos), Arg(l,Int,pos), Arg(h,Int,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;=,List(Ref(l), Ref(h))),Ref(l),If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Ref(l))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Ref(h))),If(If(App(Ref(p),List(),List(Prim(block-get,List(Ref(v), Prim(-,List(Ref(h), Lit(1))))))),Lit(false),Lit(true)),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(h), Lit(1))))),Let(x$21,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(l), Prim(-,List(Ref(h), Lit(1))))),App(Ref(loop),List(),List(Prim(+,List(Ref(l), Lit(1))), Prim(+,List(Ref(h), Lit(1))))))))))),App(Ref(loop),List(),List(Ref(l), Ref(h))))), FunDef(arrayPartition,List(T),List(Arg(v,Array[T],pos), Arg(p,T =&gt; Boolean,pos)),Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(p), Lit(0), Prim(block-length,List(Ref(v)))))), FunDef(arrayFoldLeft,List(T, U),List(Arg(f,(T,U) =&gt; T,pos), Arg(z,T,pos), Arg(v,Array[U],pos)),T,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),VarDec(zz,T,Ref(z),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$22,T,VarAssign(zz,App(Ref(f),List(),List(Ref(zz), Prim(block-get,List(Ref(v), Ref(i)))))),Let(x_69,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Ref(zz)))))), FunDef(arrayForeach,List(T),List(Arg(f,T =&gt; Unit,pos), Arg(v,Array[T],pos)),Unit,VarDec(i,Int,Lit(0),Let(l,Int,Prim(block-length,List(Ref(v))),While(Prim(&lt;,List(Ref(i), Ref(l))),Let(x$23,Unit,App(Ref(f),List(),List(Prim(block-get,List(Ref(v), Ref(i))))),Let(x_70,Int,VarAssign(i,Prim(+,List(Ref(i), Lit(1)))),Lit(()))),Lit(()))))), FunDef(arraySort,List(T),List(Arg(v,Array[T],pos), Arg(el,(T,T) =&gt; Boolean,pos)),Unit,LetRec(List(FunDef(qsort,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Unit,If(Prim(&gt;,List(Prim(-,List(Ref(h), Ref(l))), Lit(0))),Let(p,T,Prim(block-get,List(Ref(v), Ref(h))),Let(pred,T =&gt; Boolean,LetRec(List(FunDef(fun$24,List(),List(Arg(x,T,pos)),Boolean,App(Ref(el),List(),List(Ref(x), Ref(p))))),Ref(fun$24)),Let(m,Int,App(Ref(auxArrayPartition),List(T),List(Ref(v), Ref(pred), Ref(l), Ref(h))),Let(x$25,Unit,App(Ref(arraySwap),List(T),List(Ref(v), Ref(m), Ref(h))),Let(x$26,Unit,App(Ref(qsort),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),App(Ref(qsort),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h)))))))),Lit(())))),App(Ref(qsort),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayBinarySearch,List(T),List(Arg(v,Array[T],pos), Arg(e,T,pos), Arg(el,(T,T) =&gt; Boolean,pos)),Int,LetRec(List(FunDef(loop,List(),List(Arg(l,Int,pos), Arg(h,Int,pos)),Int,If(Prim(&gt;,List(Ref(l), Ref(h))),Prim(-,List(Prim(-,List(Lit(1))), Ref(l))),Let(m,Int,Prim(+,List(Ref(l), Prim(/,List(Prim(-,List(Ref(h), Ref(l))), Lit(2))))),Let(me,T,Prim(block-get,List(Ref(v), Ref(m))),If(App(Ref(el),List(),List(Ref(e), Ref(me))),App(Ref(loop),List(),List(Ref(l), Prim(-,List(Ref(m), Lit(1))))),If(App(Ref(el),List(),List(Ref(me), Ref(e))),App(Ref(loop),List(),List(Prim(+,List(Ref(m), Lit(1))), Ref(h))),Ref(m)))))))),App(Ref(loop),List(),List(Lit(0), Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(arrayToList,List(T),List(Arg(v,Array[T],pos)),List[T],LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos)),List[T],If(Prim(==,List(Ref(i), Prim(-,List(Lit(1))))),Prim(block-alloc-2,List(Lit(0))),Let(l_71,List[T],Prim(block-alloc-3,List(Lit(2))),Let(x_72,Unit,Prim(block-set,List(Ref(l_71), Lit(0), Prim(block-get,List(Ref(v), Ref(i))))),Let(x_73,Unit,Prim(block-set,List(Ref(l_71), Lit(1), App(Ref(loop),List(),List(Prim(-,List(Ref(i), Lit(1))))))),Ref(l_71))))))),App(Ref(loop),List(),List(Prim(-,List(Prim(block-length,List(Ref(v))), Lit(1))))))), FunDef(listToArray,List(T),List(Arg(l,List[T],pos)),Array[T],Let(n,Int,App(Ref(listLength),List(T),List(Ref(l))),Let(v,Array[T],Prim(block-alloc-1,List(Ref(n))),LetRec(List(FunDef(loop,List(),List(Arg(i,Int,pos), Arg(l,List[T],pos)),Unit,If(Prim(&lt;,List(Ref(i), Ref(n))),Let(x$27,Unit,Prim(block-set,List(Ref(v), Ref(i), Prim(block-get,List(Ref(l), Lit(0))))),App(Ref(loop),List(),List(Prim(+,List(Ref(i), Lit(1))), Prim(block-get,List(Ref(l), Lit(1)))))),Lit(())))),Let(x$28,Unit,App(Ref(loop),List(),List(Lit(0), Ref(l))),Ref(v)))))), FunDef(intFunGen,List(),List(),Int =&gt; Int,Let(x$29,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('O'))))),LetRec(List(FunDef(fun$30,List(),List(Arg(i,Int,pos)),Int,Prim(+,List(Ref(i), Lit(1))))),Ref(fun$30)))), FunDef(intGen,List(),List(),Int,Let(x$31,Unit,Prim(byte-write,List(Prim(char-&gt;int,List(Lit('K'))))),Lit(0)))),App(App(Ref(intFunGen),List(),List()),List(),List(App(Ref(intGen),List(),List()))))))) (of class miniscala.CMScalaTreeModule$LetRec)
	at miniscala.CMScalaToCPSTranslator$.nonTail(CMScalaToCPSTranslator.scala:16)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:11)
	at miniscala.CMScalaToCPSTranslator$.apply(CMScalaToCPSTranslator.scala:6)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:57)
	at miniscala.test.infrastructure.CompilerTest.compileInner(CompilerTest.scala:37)
	at miniscala.test.infrastructure.CompilerTest.$anonfun$compileUsingPipelineAndRedirect$1(CompilerTest.scala:44)
	at miniscala.test.infrastructure.SandboxedTest$$anon$1.run(SandboxedTest.scala:24)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTest(SandboxedTest.scala:34)
	at miniscala.test.infrastructure.SandboxedTest.sandboxedTestWithRedirectedIO(SandboxedTest.scala:45)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect(CompilerTest.scala:44)
	at miniscala.test.infrastructure.CompilerTest.compileUsingPipelineAndRedirect$(CompilerTest.scala:43)
	at miniscala.test.infrastructure.CPSTest.compileUsingPipelineAndRedirect(CPSTest.scala:11)
	at miniscala.test.infrastructure.CPSHighTest.testCPSHighProgramOutput(CPSHighTest.scala:33)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.CMScalaToCPS_Blackbox.$anonfun$compileAndInterpret$1$adapted(CMScalaToCPS_Blackbox.scala:9)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1(LibraryOKTests.scala:19)
	at miniscala.test.ok.LibraryOKTests.$anonfun$compileAndInterpretWithLib$1$adapted(LibraryOKTests.scala:19)
	at miniscala.test.ok.ConstructsOKTests.testAppOrder(ConstructsOKTests.scala:9)
	at miniscala.test.ok.ConstructsOKTests.testAppOrder$(ConstructsOKTests.scala:8)
	at miniscala.test.CMScalaToCPS_Blackbox.testAppOrder(CMScalaToCPS_Blackbox.scala:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runners.Suite.runChild(Suite.java:127)
	at org.junit.runners.Suite.runChild(Suite.java:26)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138)
	at com.novocode.junit.JUnitRunner$1.execute(JUnitRunner.java:132)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
                                               </testcase>
                     <system-out><![CDATA[]]></system-out>
                     <system-err><![CDATA[]]></system-err>
                   </testsuite>